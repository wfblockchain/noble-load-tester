// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: circle/cctp/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is the request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is the response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryRolesRequest is the request type for the Query/Roles RPC method.
type QueryRolesRequest struct {
}

func (m *QueryRolesRequest) Reset()         { *m = QueryRolesRequest{} }
func (m *QueryRolesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRolesRequest) ProtoMessage()    {}
func (*QueryRolesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{2}
}
func (m *QueryRolesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRolesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRolesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRolesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRolesRequest.Merge(m, src)
}
func (m *QueryRolesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRolesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRolesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRolesRequest proto.InternalMessageInfo

// QueryRolesResponse is the response type for the Query/Roles RPC method.
type QueryRolesResponse struct {
	Owner           string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	AttesterManager string `protobuf:"bytes,2,opt,name=attester_manager,json=attesterManager,proto3" json:"attester_manager,omitempty"`
	Pauser          string `protobuf:"bytes,3,opt,name=pauser,proto3" json:"pauser,omitempty"`
	TokenController string `protobuf:"bytes,4,opt,name=token_controller,json=tokenController,proto3" json:"token_controller,omitempty"`
}

func (m *QueryRolesResponse) Reset()         { *m = QueryRolesResponse{} }
func (m *QueryRolesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRolesResponse) ProtoMessage()    {}
func (*QueryRolesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{3}
}
func (m *QueryRolesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRolesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRolesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRolesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRolesResponse.Merge(m, src)
}
func (m *QueryRolesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRolesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRolesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRolesResponse proto.InternalMessageInfo

func (m *QueryRolesResponse) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *QueryRolesResponse) GetAttesterManager() string {
	if m != nil {
		return m.AttesterManager
	}
	return ""
}

func (m *QueryRolesResponse) GetPauser() string {
	if m != nil {
		return m.Pauser
	}
	return ""
}

func (m *QueryRolesResponse) GetTokenController() string {
	if m != nil {
		return m.TokenController
	}
	return ""
}

// QueryAttestersRequest is the request type for the Query/Attester RPC method.
type QueryGetAttesterRequest struct {
	Attester string `protobuf:"bytes,1,opt,name=attester,proto3" json:"attester,omitempty"`
}

func (m *QueryGetAttesterRequest) Reset()         { *m = QueryGetAttesterRequest{} }
func (m *QueryGetAttesterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttesterRequest) ProtoMessage()    {}
func (*QueryGetAttesterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{4}
}
func (m *QueryGetAttesterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttesterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttesterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttesterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttesterRequest.Merge(m, src)
}
func (m *QueryGetAttesterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttesterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttesterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttesterRequest proto.InternalMessageInfo

func (m *QueryGetAttesterRequest) GetAttester() string {
	if m != nil {
		return m.Attester
	}
	return ""
}

// QueryAttestersResponse is the response type for the Query/Attester RPC
// method.
type QueryGetAttesterResponse struct {
	Attester Attester `protobuf:"bytes,1,opt,name=attester,proto3" json:"attester"`
}

func (m *QueryGetAttesterResponse) Reset()         { *m = QueryGetAttesterResponse{} }
func (m *QueryGetAttesterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetAttesterResponse) ProtoMessage()    {}
func (*QueryGetAttesterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{5}
}
func (m *QueryGetAttesterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetAttesterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetAttesterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetAttesterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetAttesterResponse.Merge(m, src)
}
func (m *QueryGetAttesterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetAttesterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetAttesterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetAttesterResponse proto.InternalMessageInfo

func (m *QueryGetAttesterResponse) GetAttester() Attester {
	if m != nil {
		return m.Attester
	}
	return Attester{}
}

// QueryAllAttestersRequest is the request type for the Query/Attesters RPC
// method.
type QueryAllAttestersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestersRequest) Reset()         { *m = QueryAllAttestersRequest{} }
func (m *QueryAllAttestersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestersRequest) ProtoMessage()    {}
func (*QueryAllAttestersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{6}
}
func (m *QueryAllAttestersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestersRequest.Merge(m, src)
}
func (m *QueryAllAttestersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestersRequest proto.InternalMessageInfo

func (m *QueryAllAttestersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllAttestersResponse is the response type for the Query/Attesters RPC
// method.
type QueryAllAttestersResponse struct {
	Attesters  []Attester          `protobuf:"bytes,1,rep,name=attesters,proto3" json:"attesters"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllAttestersResponse) Reset()         { *m = QueryAllAttestersResponse{} }
func (m *QueryAllAttestersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllAttestersResponse) ProtoMessage()    {}
func (*QueryAllAttestersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{7}
}
func (m *QueryAllAttestersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllAttestersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllAttestersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllAttestersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllAttestersResponse.Merge(m, src)
}
func (m *QueryAllAttestersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllAttestersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllAttestersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllAttestersResponse proto.InternalMessageInfo

func (m *QueryAllAttestersResponse) GetAttesters() []Attester {
	if m != nil {
		return m.Attesters
	}
	return nil
}

func (m *QueryAllAttestersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryPerMessageBurnLimitRequest is the request type for the
// Query/PerMessageBurnLimit RPC method.
type QueryGetPerMessageBurnLimitRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetPerMessageBurnLimitRequest) Reset()         { *m = QueryGetPerMessageBurnLimitRequest{} }
func (m *QueryGetPerMessageBurnLimitRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPerMessageBurnLimitRequest) ProtoMessage()    {}
func (*QueryGetPerMessageBurnLimitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{8}
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPerMessageBurnLimitRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPerMessageBurnLimitRequest.Merge(m, src)
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPerMessageBurnLimitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPerMessageBurnLimitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPerMessageBurnLimitRequest proto.InternalMessageInfo

func (m *QueryGetPerMessageBurnLimitRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryPerMessageBurnLimitResponse is the response type for the
// Query/PerMessageBurnLimit RPC method.
type QueryGetPerMessageBurnLimitResponse struct {
	BurnLimit PerMessageBurnLimit `protobuf:"bytes,1,opt,name=burn_limit,json=burnLimit,proto3" json:"burn_limit"`
}

func (m *QueryGetPerMessageBurnLimitResponse) Reset()         { *m = QueryGetPerMessageBurnLimitResponse{} }
func (m *QueryGetPerMessageBurnLimitResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPerMessageBurnLimitResponse) ProtoMessage()    {}
func (*QueryGetPerMessageBurnLimitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{9}
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPerMessageBurnLimitResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPerMessageBurnLimitResponse.Merge(m, src)
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPerMessageBurnLimitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPerMessageBurnLimitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPerMessageBurnLimitResponse proto.InternalMessageInfo

func (m *QueryGetPerMessageBurnLimitResponse) GetBurnLimit() PerMessageBurnLimit {
	if m != nil {
		return m.BurnLimit
	}
	return PerMessageBurnLimit{}
}

// QueryAllPerMessageBurnLimitsRequest is the response type for the
// Query/PerMessageBurnLimit RPC method.
type QueryAllPerMessageBurnLimitsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPerMessageBurnLimitsRequest) Reset()         { *m = QueryAllPerMessageBurnLimitsRequest{} }
func (m *QueryAllPerMessageBurnLimitsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPerMessageBurnLimitsRequest) ProtoMessage()    {}
func (*QueryAllPerMessageBurnLimitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{10}
}
func (m *QueryAllPerMessageBurnLimitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPerMessageBurnLimitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPerMessageBurnLimitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPerMessageBurnLimitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPerMessageBurnLimitsRequest.Merge(m, src)
}
func (m *QueryAllPerMessageBurnLimitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPerMessageBurnLimitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPerMessageBurnLimitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPerMessageBurnLimitsRequest proto.InternalMessageInfo

func (m *QueryAllPerMessageBurnLimitsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllPerMessageBurnLimitsRequest is the response type for the
// Query/PerMessageBurnLimit RPC method.
type QueryAllPerMessageBurnLimitsResponse struct {
	BurnLimits []PerMessageBurnLimit `protobuf:"bytes,1,rep,name=burn_limits,json=burnLimits,proto3" json:"burn_limits"`
	Pagination *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPerMessageBurnLimitsResponse) Reset()         { *m = QueryAllPerMessageBurnLimitsResponse{} }
func (m *QueryAllPerMessageBurnLimitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPerMessageBurnLimitsResponse) ProtoMessage()    {}
func (*QueryAllPerMessageBurnLimitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{11}
}
func (m *QueryAllPerMessageBurnLimitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPerMessageBurnLimitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPerMessageBurnLimitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPerMessageBurnLimitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPerMessageBurnLimitsResponse.Merge(m, src)
}
func (m *QueryAllPerMessageBurnLimitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPerMessageBurnLimitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPerMessageBurnLimitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPerMessageBurnLimitsResponse proto.InternalMessageInfo

func (m *QueryAllPerMessageBurnLimitsResponse) GetBurnLimits() []PerMessageBurnLimit {
	if m != nil {
		return m.BurnLimits
	}
	return nil
}

func (m *QueryAllPerMessageBurnLimitsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBurningAndMintingPausedRequest is the request type for the
// Query/BurningAndMintingPaused RPC method.
type QueryGetBurningAndMintingPausedRequest struct {
}

func (m *QueryGetBurningAndMintingPausedRequest) Reset() {
	*m = QueryGetBurningAndMintingPausedRequest{}
}
func (m *QueryGetBurningAndMintingPausedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBurningAndMintingPausedRequest) ProtoMessage()    {}
func (*QueryGetBurningAndMintingPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{12}
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBurningAndMintingPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBurningAndMintingPausedRequest.Merge(m, src)
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBurningAndMintingPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBurningAndMintingPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBurningAndMintingPausedRequest proto.InternalMessageInfo

// QueryBurningAndMintingPausedResponse is the response type for the
// Query/BurningAndMintingPaused RPC method.
type QueryGetBurningAndMintingPausedResponse struct {
	Paused BurningAndMintingPaused `protobuf:"bytes,1,opt,name=paused,proto3" json:"paused"`
}

func (m *QueryGetBurningAndMintingPausedResponse) Reset() {
	*m = QueryGetBurningAndMintingPausedResponse{}
}
func (m *QueryGetBurningAndMintingPausedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBurningAndMintingPausedResponse) ProtoMessage()    {}
func (*QueryGetBurningAndMintingPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{13}
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBurningAndMintingPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBurningAndMintingPausedResponse.Merge(m, src)
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBurningAndMintingPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBurningAndMintingPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBurningAndMintingPausedResponse proto.InternalMessageInfo

func (m *QueryGetBurningAndMintingPausedResponse) GetPaused() BurningAndMintingPaused {
	if m != nil {
		return m.Paused
	}
	return BurningAndMintingPaused{}
}

// QuerySendingAndReceivingPausedRequest is the request type for the
// Query/SendingAndReceivingPaused RPC method.
type QueryGetSendingAndReceivingMessagesPausedRequest struct {
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Reset() {
	*m = QueryGetSendingAndReceivingMessagesPausedRequest{}
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetSendingAndReceivingMessagesPausedRequest) ProtoMessage() {}
func (*QueryGetSendingAndReceivingMessagesPausedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{14}
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest.Merge(m, src)
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedRequest proto.InternalMessageInfo

// QuerySendingAndReceivingPausedResponse is the response type for the
// Query/SendingAndReceivingPaused RPC method.
type QueryGetSendingAndReceivingMessagesPausedResponse struct {
	Paused SendingAndReceivingMessagesPaused `protobuf:"bytes,1,opt,name=paused,proto3" json:"paused"`
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Reset() {
	*m = QueryGetSendingAndReceivingMessagesPausedResponse{}
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetSendingAndReceivingMessagesPausedResponse) ProtoMessage() {}
func (*QueryGetSendingAndReceivingMessagesPausedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{15}
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse.Merge(m, src)
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendingAndReceivingMessagesPausedResponse proto.InternalMessageInfo

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) GetPaused() SendingAndReceivingMessagesPaused {
	if m != nil {
		return m.Paused
	}
	return SendingAndReceivingMessagesPaused{}
}

// QueryMaxMessageBodySizeRequest is the request type for the
// Query/MaxMessageBodySize RPC method.
type QueryGetMaxMessageBodySizeRequest struct {
}

func (m *QueryGetMaxMessageBodySizeRequest) Reset()         { *m = QueryGetMaxMessageBodySizeRequest{} }
func (m *QueryGetMaxMessageBodySizeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMaxMessageBodySizeRequest) ProtoMessage()    {}
func (*QueryGetMaxMessageBodySizeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{16}
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMaxMessageBodySizeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMaxMessageBodySizeRequest.Merge(m, src)
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMaxMessageBodySizeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMaxMessageBodySizeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMaxMessageBodySizeRequest proto.InternalMessageInfo

// QueryMaxMessageBodySizeResponse is the response type for the
// Query/MaxMessageBodySize RPC method.
type QueryGetMaxMessageBodySizeResponse struct {
	Amount MaxMessageBodySize `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryGetMaxMessageBodySizeResponse) Reset()         { *m = QueryGetMaxMessageBodySizeResponse{} }
func (m *QueryGetMaxMessageBodySizeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMaxMessageBodySizeResponse) ProtoMessage()    {}
func (*QueryGetMaxMessageBodySizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{17}
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMaxMessageBodySizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMaxMessageBodySizeResponse.Merge(m, src)
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMaxMessageBodySizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMaxMessageBodySizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMaxMessageBodySizeResponse proto.InternalMessageInfo

func (m *QueryGetMaxMessageBodySizeResponse) GetAmount() MaxMessageBodySize {
	if m != nil {
		return m.Amount
	}
	return MaxMessageBodySize{}
}

// QueryGetNextAvailableNonceRequest is the request type for the
// Query/NextAvailableNonce RPC method.
type QueryGetNextAvailableNonceRequest struct {
}

func (m *QueryGetNextAvailableNonceRequest) Reset()         { *m = QueryGetNextAvailableNonceRequest{} }
func (m *QueryGetNextAvailableNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNextAvailableNonceRequest) ProtoMessage()    {}
func (*QueryGetNextAvailableNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{18}
}
func (m *QueryGetNextAvailableNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNextAvailableNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNextAvailableNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNextAvailableNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNextAvailableNonceRequest.Merge(m, src)
}
func (m *QueryGetNextAvailableNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNextAvailableNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNextAvailableNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNextAvailableNonceRequest proto.InternalMessageInfo

// Query QueryGetNextAvailableNonceResponse is the response type for the
// Query/NextAvailableNonce RPC method.
type QueryGetNextAvailableNonceResponse struct {
	Nonce Nonce `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce"`
}

func (m *QueryGetNextAvailableNonceResponse) Reset()         { *m = QueryGetNextAvailableNonceResponse{} }
func (m *QueryGetNextAvailableNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNextAvailableNonceResponse) ProtoMessage()    {}
func (*QueryGetNextAvailableNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{19}
}
func (m *QueryGetNextAvailableNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNextAvailableNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNextAvailableNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNextAvailableNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNextAvailableNonceResponse.Merge(m, src)
}
func (m *QueryGetNextAvailableNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNextAvailableNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNextAvailableNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNextAvailableNonceResponse proto.InternalMessageInfo

func (m *QueryGetNextAvailableNonceResponse) GetNonce() Nonce {
	if m != nil {
		return m.Nonce
	}
	return Nonce{}
}

// QuerySignatureThresholdRequest is the request type for the
// Query/SignatureThreshold RPC method.
type QueryGetSignatureThresholdRequest struct {
}

func (m *QueryGetSignatureThresholdRequest) Reset()         { *m = QueryGetSignatureThresholdRequest{} }
func (m *QueryGetSignatureThresholdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureThresholdRequest) ProtoMessage()    {}
func (*QueryGetSignatureThresholdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{20}
}
func (m *QueryGetSignatureThresholdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureThresholdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureThresholdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureThresholdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureThresholdRequest.Merge(m, src)
}
func (m *QueryGetSignatureThresholdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureThresholdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureThresholdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureThresholdRequest proto.InternalMessageInfo

// QuerySignatureThresholdResponse is the response type for the
// Query/SignatureThreshold RPC method.
type QueryGetSignatureThresholdResponse struct {
	Amount SignatureThreshold `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryGetSignatureThresholdResponse) Reset()         { *m = QueryGetSignatureThresholdResponse{} }
func (m *QueryGetSignatureThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSignatureThresholdResponse) ProtoMessage()    {}
func (*QueryGetSignatureThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{21}
}
func (m *QueryGetSignatureThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSignatureThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSignatureThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSignatureThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSignatureThresholdResponse.Merge(m, src)
}
func (m *QueryGetSignatureThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSignatureThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSignatureThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSignatureThresholdResponse proto.InternalMessageInfo

func (m *QueryGetSignatureThresholdResponse) GetAmount() SignatureThreshold {
	if m != nil {
		return m.Amount
	}
	return SignatureThreshold{}
}

// QueryGetTokenPairRequest is the request type for the Query/TokenPair RPC
// method.
type QueryGetTokenPairRequest struct {
	RemoteDomain uint32 `protobuf:"varint,1,opt,name=remote_domain,json=remoteDomain,proto3" json:"remote_domain,omitempty"`
	RemoteToken  string `protobuf:"bytes,2,opt,name=remote_token,json=remoteToken,proto3" json:"remote_token,omitempty"`
}

func (m *QueryGetTokenPairRequest) Reset()         { *m = QueryGetTokenPairRequest{} }
func (m *QueryGetTokenPairRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenPairRequest) ProtoMessage()    {}
func (*QueryGetTokenPairRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{22}
}
func (m *QueryGetTokenPairRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenPairRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenPairRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenPairRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenPairRequest.Merge(m, src)
}
func (m *QueryGetTokenPairRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenPairRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenPairRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenPairRequest proto.InternalMessageInfo

func (m *QueryGetTokenPairRequest) GetRemoteDomain() uint32 {
	if m != nil {
		return m.RemoteDomain
	}
	return 0
}

func (m *QueryGetTokenPairRequest) GetRemoteToken() string {
	if m != nil {
		return m.RemoteToken
	}
	return ""
}

// QueryGetTokenPairResponse is the response type for the Query/TokenPair RPC
// method.
type QueryGetTokenPairResponse struct {
	Pair TokenPair `protobuf:"bytes,1,opt,name=pair,proto3" json:"pair"`
}

func (m *QueryGetTokenPairResponse) Reset()         { *m = QueryGetTokenPairResponse{} }
func (m *QueryGetTokenPairResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTokenPairResponse) ProtoMessage()    {}
func (*QueryGetTokenPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{23}
}
func (m *QueryGetTokenPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTokenPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTokenPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTokenPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTokenPairResponse.Merge(m, src)
}
func (m *QueryGetTokenPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTokenPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTokenPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTokenPairResponse proto.InternalMessageInfo

func (m *QueryGetTokenPairResponse) GetPair() TokenPair {
	if m != nil {
		return m.Pair
	}
	return TokenPair{}
}

// QueryAllTokenPairsRequest is the request type for the Query/TokenPairs RPC
// method.
type QueryAllTokenPairsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenPairsRequest) Reset()         { *m = QueryAllTokenPairsRequest{} }
func (m *QueryAllTokenPairsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenPairsRequest) ProtoMessage()    {}
func (*QueryAllTokenPairsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{24}
}
func (m *QueryAllTokenPairsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenPairsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenPairsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenPairsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenPairsRequest.Merge(m, src)
}
func (m *QueryAllTokenPairsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenPairsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenPairsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenPairsRequest proto.InternalMessageInfo

func (m *QueryAllTokenPairsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllTokenPairsResponse is the response type for the Query/TokenPairs RPC
// method.
type QueryAllTokenPairsResponse struct {
	TokenPairs []TokenPair         `protobuf:"bytes,1,rep,name=token_pairs,json=tokenPairs,proto3" json:"token_pairs"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTokenPairsResponse) Reset()         { *m = QueryAllTokenPairsResponse{} }
func (m *QueryAllTokenPairsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTokenPairsResponse) ProtoMessage()    {}
func (*QueryAllTokenPairsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{25}
}
func (m *QueryAllTokenPairsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTokenPairsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTokenPairsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTokenPairsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTokenPairsResponse.Merge(m, src)
}
func (m *QueryAllTokenPairsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTokenPairsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTokenPairsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTokenPairsResponse proto.InternalMessageInfo

func (m *QueryAllTokenPairsResponse) GetTokenPairs() []TokenPair {
	if m != nil {
		return m.TokenPairs
	}
	return nil
}

func (m *QueryAllTokenPairsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryGetUsedNonceRequest is the request type for the Query/UsedNonce RPC
// method.
type QueryGetUsedNonceRequest struct {
	SourceDomain uint32 `protobuf:"varint,1,opt,name=source_domain,json=sourceDomain,proto3" json:"source_domain,omitempty"`
	Nonce        uint64 `protobuf:"varint,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryGetUsedNonceRequest) Reset()         { *m = QueryGetUsedNonceRequest{} }
func (m *QueryGetUsedNonceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetUsedNonceRequest) ProtoMessage()    {}
func (*QueryGetUsedNonceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{26}
}
func (m *QueryGetUsedNonceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUsedNonceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUsedNonceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUsedNonceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUsedNonceRequest.Merge(m, src)
}
func (m *QueryGetUsedNonceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUsedNonceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUsedNonceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUsedNonceRequest proto.InternalMessageInfo

func (m *QueryGetUsedNonceRequest) GetSourceDomain() uint32 {
	if m != nil {
		return m.SourceDomain
	}
	return 0
}

func (m *QueryGetUsedNonceRequest) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

// QueryGetUsedNonceResponse is the response type for the Query/UsedNonce RPC
// method.
type QueryGetUsedNonceResponse struct {
	Nonce Nonce `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce"`
}

func (m *QueryGetUsedNonceResponse) Reset()         { *m = QueryGetUsedNonceResponse{} }
func (m *QueryGetUsedNonceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetUsedNonceResponse) ProtoMessage()    {}
func (*QueryGetUsedNonceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{27}
}
func (m *QueryGetUsedNonceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetUsedNonceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetUsedNonceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetUsedNonceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetUsedNonceResponse.Merge(m, src)
}
func (m *QueryGetUsedNonceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetUsedNonceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetUsedNonceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetUsedNonceResponse proto.InternalMessageInfo

func (m *QueryGetUsedNonceResponse) GetNonce() Nonce {
	if m != nil {
		return m.Nonce
	}
	return Nonce{}
}

// QueryAllUsedNonceRequest is the request type for the Query/UsedNonces RPC
// method.
type QueryAllUsedNoncesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUsedNoncesRequest) Reset()         { *m = QueryAllUsedNoncesRequest{} }
func (m *QueryAllUsedNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllUsedNoncesRequest) ProtoMessage()    {}
func (*QueryAllUsedNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{28}
}
func (m *QueryAllUsedNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUsedNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUsedNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUsedNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUsedNoncesRequest.Merge(m, src)
}
func (m *QueryAllUsedNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUsedNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUsedNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUsedNoncesRequest proto.InternalMessageInfo

func (m *QueryAllUsedNoncesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryAllUsedNonceResponse is the response type for the Query/UsedNonces RPC
// method.
type QueryAllUsedNoncesResponse struct {
	UsedNonces []Nonce             `protobuf:"bytes,1,rep,name=used_nonces,json=usedNonces,proto3" json:"used_nonces"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllUsedNoncesResponse) Reset()         { *m = QueryAllUsedNoncesResponse{} }
func (m *QueryAllUsedNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllUsedNoncesResponse) ProtoMessage()    {}
func (*QueryAllUsedNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{29}
}
func (m *QueryAllUsedNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllUsedNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllUsedNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllUsedNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllUsedNoncesResponse.Merge(m, src)
}
func (m *QueryAllUsedNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllUsedNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllUsedNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllUsedNoncesResponse proto.InternalMessageInfo

func (m *QueryAllUsedNoncesResponse) GetUsedNonces() []Nonce {
	if m != nil {
		return m.UsedNonces
	}
	return nil
}

func (m *QueryAllUsedNoncesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRemoteTokenMessengerRequest is the request type for the
// Query/RemoteTokenMessenger RPC method.
type QueryRemoteTokenMessengerRequest struct {
	DomainId uint32 `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (m *QueryRemoteTokenMessengerRequest) Reset()         { *m = QueryRemoteTokenMessengerRequest{} }
func (m *QueryRemoteTokenMessengerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRemoteTokenMessengerRequest) ProtoMessage()    {}
func (*QueryRemoteTokenMessengerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{30}
}
func (m *QueryRemoteTokenMessengerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemoteTokenMessengerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemoteTokenMessengerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemoteTokenMessengerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemoteTokenMessengerRequest.Merge(m, src)
}
func (m *QueryRemoteTokenMessengerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemoteTokenMessengerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemoteTokenMessengerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemoteTokenMessengerRequest proto.InternalMessageInfo

func (m *QueryRemoteTokenMessengerRequest) GetDomainId() uint32 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

// QueryRemoteTokenMessengerResponse is the response type for the
// Query/RemoteTokenMessenger RPC method.
type QueryRemoteTokenMessengerResponse struct {
	RemoteTokenMessenger RemoteTokenMessenger `protobuf:"bytes,1,opt,name=remote_token_messenger,json=remoteTokenMessenger,proto3" json:"remote_token_messenger"`
}

func (m *QueryRemoteTokenMessengerResponse) Reset()         { *m = QueryRemoteTokenMessengerResponse{} }
func (m *QueryRemoteTokenMessengerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRemoteTokenMessengerResponse) ProtoMessage()    {}
func (*QueryRemoteTokenMessengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{31}
}
func (m *QueryRemoteTokenMessengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemoteTokenMessengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemoteTokenMessengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemoteTokenMessengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemoteTokenMessengerResponse.Merge(m, src)
}
func (m *QueryRemoteTokenMessengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemoteTokenMessengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemoteTokenMessengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemoteTokenMessengerResponse proto.InternalMessageInfo

func (m *QueryRemoteTokenMessengerResponse) GetRemoteTokenMessenger() RemoteTokenMessenger {
	if m != nil {
		return m.RemoteTokenMessenger
	}
	return RemoteTokenMessenger{}
}

// QueryRemoteTokenMessengersRequest is the request type for the
// Query/RemoteTokenMessengers RPC method.
type QueryRemoteTokenMessengersRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRemoteTokenMessengersRequest) Reset()         { *m = QueryRemoteTokenMessengersRequest{} }
func (m *QueryRemoteTokenMessengersRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRemoteTokenMessengersRequest) ProtoMessage()    {}
func (*QueryRemoteTokenMessengersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{32}
}
func (m *QueryRemoteTokenMessengersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemoteTokenMessengersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemoteTokenMessengersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemoteTokenMessengersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemoteTokenMessengersRequest.Merge(m, src)
}
func (m *QueryRemoteTokenMessengersRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemoteTokenMessengersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemoteTokenMessengersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemoteTokenMessengersRequest proto.InternalMessageInfo

func (m *QueryRemoteTokenMessengersRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryRemoteTokenMessengersResponse is the response type for the
// Query/RemoteTokenMessengers RPC method.
type QueryRemoteTokenMessengersResponse struct {
	RemoteTokenMessengers []RemoteTokenMessenger `protobuf:"bytes,1,rep,name=remote_token_messengers,json=remoteTokenMessengers,proto3" json:"remote_token_messengers"`
	Pagination            *query.PageResponse    `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryRemoteTokenMessengersResponse) Reset()         { *m = QueryRemoteTokenMessengersResponse{} }
func (m *QueryRemoteTokenMessengersResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRemoteTokenMessengersResponse) ProtoMessage()    {}
func (*QueryRemoteTokenMessengersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{33}
}
func (m *QueryRemoteTokenMessengersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRemoteTokenMessengersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRemoteTokenMessengersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRemoteTokenMessengersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRemoteTokenMessengersResponse.Merge(m, src)
}
func (m *QueryRemoteTokenMessengersResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRemoteTokenMessengersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRemoteTokenMessengersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRemoteTokenMessengersResponse proto.InternalMessageInfo

func (m *QueryRemoteTokenMessengersResponse) GetRemoteTokenMessengers() []RemoteTokenMessenger {
	if m != nil {
		return m.RemoteTokenMessengers
	}
	return nil
}

func (m *QueryRemoteTokenMessengersResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// QueryBurnMessageVersionRequest is the request type for the
// Query/BurnMessageVersion RPC method.
type QueryBurnMessageVersionRequest struct {
}

func (m *QueryBurnMessageVersionRequest) Reset()         { *m = QueryBurnMessageVersionRequest{} }
func (m *QueryBurnMessageVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBurnMessageVersionRequest) ProtoMessage()    {}
func (*QueryBurnMessageVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{34}
}
func (m *QueryBurnMessageVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnMessageVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnMessageVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnMessageVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnMessageVersionRequest.Merge(m, src)
}
func (m *QueryBurnMessageVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnMessageVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnMessageVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnMessageVersionRequest proto.InternalMessageInfo

// QueryBurnMessageVersionResponse is the response type for the
// Query/BurnMessageVersion RPC method.
type QueryBurnMessageVersionResponse struct {
	// version is the burn message version of the local domain.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *QueryBurnMessageVersionResponse) Reset()         { *m = QueryBurnMessageVersionResponse{} }
func (m *QueryBurnMessageVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBurnMessageVersionResponse) ProtoMessage()    {}
func (*QueryBurnMessageVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{35}
}
func (m *QueryBurnMessageVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBurnMessageVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBurnMessageVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBurnMessageVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBurnMessageVersionResponse.Merge(m, src)
}
func (m *QueryBurnMessageVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBurnMessageVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBurnMessageVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBurnMessageVersionResponse proto.InternalMessageInfo

func (m *QueryBurnMessageVersionResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// QueryLocalMessageVersionRequest is the request type for the
// Query/LocalMessageVersion RPC method.
type QueryLocalMessageVersionRequest struct {
}

func (m *QueryLocalMessageVersionRequest) Reset()         { *m = QueryLocalMessageVersionRequest{} }
func (m *QueryLocalMessageVersionRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLocalMessageVersionRequest) ProtoMessage()    {}
func (*QueryLocalMessageVersionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{36}
}
func (m *QueryLocalMessageVersionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLocalMessageVersionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLocalMessageVersionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLocalMessageVersionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLocalMessageVersionRequest.Merge(m, src)
}
func (m *QueryLocalMessageVersionRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLocalMessageVersionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLocalMessageVersionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLocalMessageVersionRequest proto.InternalMessageInfo

// QueryLocalMessageVersionResponse is the response type for the
// Query/LocalMessageVersion RPC method.
type QueryLocalMessageVersionResponse struct {
	// version is the message version of the local domain.
	Version uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
}

func (m *QueryLocalMessageVersionResponse) Reset()         { *m = QueryLocalMessageVersionResponse{} }
func (m *QueryLocalMessageVersionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLocalMessageVersionResponse) ProtoMessage()    {}
func (*QueryLocalMessageVersionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{37}
}
func (m *QueryLocalMessageVersionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLocalMessageVersionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLocalMessageVersionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLocalMessageVersionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLocalMessageVersionResponse.Merge(m, src)
}
func (m *QueryLocalMessageVersionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLocalMessageVersionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLocalMessageVersionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLocalMessageVersionResponse proto.InternalMessageInfo

func (m *QueryLocalMessageVersionResponse) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

// QueryLocalDomainRequest is the request type for the Query/LocalDomain RPC
// method.
type QueryLocalDomainRequest struct {
}

func (m *QueryLocalDomainRequest) Reset()         { *m = QueryLocalDomainRequest{} }
func (m *QueryLocalDomainRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLocalDomainRequest) ProtoMessage()    {}
func (*QueryLocalDomainRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{38}
}
func (m *QueryLocalDomainRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLocalDomainRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLocalDomainRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLocalDomainRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLocalDomainRequest.Merge(m, src)
}
func (m *QueryLocalDomainRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLocalDomainRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLocalDomainRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLocalDomainRequest proto.InternalMessageInfo

// QueryLocalDomainResponse is the response type for the Query/LocalDomain RPC
// method.
type QueryLocalDomainResponse struct {
	// domain_id is the id of the local domain.
	DomainId uint32 `protobuf:"varint,1,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (m *QueryLocalDomainResponse) Reset()         { *m = QueryLocalDomainResponse{} }
func (m *QueryLocalDomainResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLocalDomainResponse) ProtoMessage()    {}
func (*QueryLocalDomainResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7468ed27f019b2f, []int{39}
}
func (m *QueryLocalDomainResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLocalDomainResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLocalDomainResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLocalDomainResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLocalDomainResponse.Merge(m, src)
}
func (m *QueryLocalDomainResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLocalDomainResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLocalDomainResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLocalDomainResponse proto.InternalMessageInfo

func (m *QueryLocalDomainResponse) GetDomainId() uint32 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "circle.cctp.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "circle.cctp.v1.QueryParamsResponse")
	proto.RegisterType((*QueryRolesRequest)(nil), "circle.cctp.v1.QueryRolesRequest")
	proto.RegisterType((*QueryRolesResponse)(nil), "circle.cctp.v1.QueryRolesResponse")
	proto.RegisterType((*QueryGetAttesterRequest)(nil), "circle.cctp.v1.QueryGetAttesterRequest")
	proto.RegisterType((*QueryGetAttesterResponse)(nil), "circle.cctp.v1.QueryGetAttesterResponse")
	proto.RegisterType((*QueryAllAttestersRequest)(nil), "circle.cctp.v1.QueryAllAttestersRequest")
	proto.RegisterType((*QueryAllAttestersResponse)(nil), "circle.cctp.v1.QueryAllAttestersResponse")
	proto.RegisterType((*QueryGetPerMessageBurnLimitRequest)(nil), "circle.cctp.v1.QueryGetPerMessageBurnLimitRequest")
	proto.RegisterType((*QueryGetPerMessageBurnLimitResponse)(nil), "circle.cctp.v1.QueryGetPerMessageBurnLimitResponse")
	proto.RegisterType((*QueryAllPerMessageBurnLimitsRequest)(nil), "circle.cctp.v1.QueryAllPerMessageBurnLimitsRequest")
	proto.RegisterType((*QueryAllPerMessageBurnLimitsResponse)(nil), "circle.cctp.v1.QueryAllPerMessageBurnLimitsResponse")
	proto.RegisterType((*QueryGetBurningAndMintingPausedRequest)(nil), "circle.cctp.v1.QueryGetBurningAndMintingPausedRequest")
	proto.RegisterType((*QueryGetBurningAndMintingPausedResponse)(nil), "circle.cctp.v1.QueryGetBurningAndMintingPausedResponse")
	proto.RegisterType((*QueryGetSendingAndReceivingMessagesPausedRequest)(nil), "circle.cctp.v1.QueryGetSendingAndReceivingMessagesPausedRequest")
	proto.RegisterType((*QueryGetSendingAndReceivingMessagesPausedResponse)(nil), "circle.cctp.v1.QueryGetSendingAndReceivingMessagesPausedResponse")
	proto.RegisterType((*QueryGetMaxMessageBodySizeRequest)(nil), "circle.cctp.v1.QueryGetMaxMessageBodySizeRequest")
	proto.RegisterType((*QueryGetMaxMessageBodySizeResponse)(nil), "circle.cctp.v1.QueryGetMaxMessageBodySizeResponse")
	proto.RegisterType((*QueryGetNextAvailableNonceRequest)(nil), "circle.cctp.v1.QueryGetNextAvailableNonceRequest")
	proto.RegisterType((*QueryGetNextAvailableNonceResponse)(nil), "circle.cctp.v1.QueryGetNextAvailableNonceResponse")
	proto.RegisterType((*QueryGetSignatureThresholdRequest)(nil), "circle.cctp.v1.QueryGetSignatureThresholdRequest")
	proto.RegisterType((*QueryGetSignatureThresholdResponse)(nil), "circle.cctp.v1.QueryGetSignatureThresholdResponse")
	proto.RegisterType((*QueryGetTokenPairRequest)(nil), "circle.cctp.v1.QueryGetTokenPairRequest")
	proto.RegisterType((*QueryGetTokenPairResponse)(nil), "circle.cctp.v1.QueryGetTokenPairResponse")
	proto.RegisterType((*QueryAllTokenPairsRequest)(nil), "circle.cctp.v1.QueryAllTokenPairsRequest")
	proto.RegisterType((*QueryAllTokenPairsResponse)(nil), "circle.cctp.v1.QueryAllTokenPairsResponse")
	proto.RegisterType((*QueryGetUsedNonceRequest)(nil), "circle.cctp.v1.QueryGetUsedNonceRequest")
	proto.RegisterType((*QueryGetUsedNonceResponse)(nil), "circle.cctp.v1.QueryGetUsedNonceResponse")
	proto.RegisterType((*QueryAllUsedNoncesRequest)(nil), "circle.cctp.v1.QueryAllUsedNoncesRequest")
	proto.RegisterType((*QueryAllUsedNoncesResponse)(nil), "circle.cctp.v1.QueryAllUsedNoncesResponse")
	proto.RegisterType((*QueryRemoteTokenMessengerRequest)(nil), "circle.cctp.v1.QueryRemoteTokenMessengerRequest")
	proto.RegisterType((*QueryRemoteTokenMessengerResponse)(nil), "circle.cctp.v1.QueryRemoteTokenMessengerResponse")
	proto.RegisterType((*QueryRemoteTokenMessengersRequest)(nil), "circle.cctp.v1.QueryRemoteTokenMessengersRequest")
	proto.RegisterType((*QueryRemoteTokenMessengersResponse)(nil), "circle.cctp.v1.QueryRemoteTokenMessengersResponse")
	proto.RegisterType((*QueryBurnMessageVersionRequest)(nil), "circle.cctp.v1.QueryBurnMessageVersionRequest")
	proto.RegisterType((*QueryBurnMessageVersionResponse)(nil), "circle.cctp.v1.QueryBurnMessageVersionResponse")
	proto.RegisterType((*QueryLocalMessageVersionRequest)(nil), "circle.cctp.v1.QueryLocalMessageVersionRequest")
	proto.RegisterType((*QueryLocalMessageVersionResponse)(nil), "circle.cctp.v1.QueryLocalMessageVersionResponse")
	proto.RegisterType((*QueryLocalDomainRequest)(nil), "circle.cctp.v1.QueryLocalDomainRequest")
	proto.RegisterType((*QueryLocalDomainResponse)(nil), "circle.cctp.v1.QueryLocalDomainResponse")
}

func init() { proto.RegisterFile("circle/cctp/v1/query.proto", fileDescriptor_e7468ed27f019b2f) }

var fileDescriptor_e7468ed27f019b2f = []byte{
	// 1797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x59, 0xcb, 0x6f, 0xdc, 0x54,
	0x17, 0x8f, 0xdb, 0xa4, 0x5f, 0x73, 0xd2, 0x7e, 0x8f, 0x9b, 0x49, 0x33, 0x71, 0xda, 0x69, 0xe3,
	0xa4, 0x4d, 0xfa, 0x1a, 0x77, 0x92, 0xf6, 0x8b, 0x94, 0xf6, 0xd3, 0xd7, 0x84, 0x47, 0x29, 0x34,
	0x25, 0xa4, 0x0f, 0x24, 0x36, 0x83, 0x67, 0xe6, 0x76, 0x62, 0xd5, 0x63, 0x4f, 0x6d, 0x4f, 0x9a,
	0x34, 0xca, 0x86, 0x97, 0x90, 0xd8, 0x20, 0xb1, 0x61, 0xc3, 0x86, 0x22, 0x15, 0xd8, 0x20, 0xb1,
	0x01, 0x09, 0x89, 0x75, 0x25, 0x36, 0x45, 0x6c, 0x58, 0x21, 0xd4, 0x22, 0xf1, 0x6f, 0x20, 0xdf,
	0x7b, 0xae, 0x3d, 0x63, 0xfb, 0xce, 0xa3, 0xcc, 0x6e, 0x7c, 0xef, 0x79, 0xfc, 0xce, 0x39, 0xd7,
	0xe7, 0x9e, 0x9f, 0x07, 0xd4, 0xb2, 0xe9, 0x96, 0x2d, 0xaa, 0x97, 0xcb, 0x7e, 0x5d, 0xdf, 0x2c,
	0xe8, 0xf7, 0x1a, 0xd4, 0xdd, 0xce, 0xd7, 0x5d, 0xc7, 0x77, 0xc8, 0x3f, 0xf9, 0x5e, 0x3e, 0xd8,
	0xcb, 0x6f, 0x16, 0xd4, 0x23, 0x31, 0x59, 0xc3, 0xf7, 0xa9, 0xe7, 0x53, 0x97, 0x8b, 0xab, 0x7a,
	0x6c, 0xbb, 0xd4, 0x70, 0x6d, 0xd3, 0xae, 0x16, 0x0d, 0xbb, 0x52, 0xac, 0x99, 0xb6, 0x1f, 0xfc,
	0xae, 0x1b, 0x0d, 0x8f, 0x56, 0x50, 0xe1, 0x54, 0x4c, 0xa1, 0x66, 0x6c, 0x15, 0x6b, 0xd4, 0xf3,
	0x8c, 0x2a, 0x2d, 0x96, 0x9c, 0xca, 0x76, 0xd1, 0x33, 0x1f, 0x50, 0x94, 0x8d, 0xe3, 0xb4, 0x1d,
	0xbb, 0x2c, 0xf6, 0x26, 0x63, 0x7b, 0x75, 0xc3, 0x35, 0x6a, 0x1e, 0x6e, 0x9e, 0x8e, 0x6f, 0x52,
	0x37, 0x72, 0xd2, 0x70, 0xed, 0xa2, 0x65, 0xd6, 0x4c, 0x5f, 0x22, 0xec, 0xd2, 0x9a, 0xe3, 0xd3,
	0xa2, 0xef, 0xdc, 0xa5, 0x36, 0xd3, 0xa2, 0x76, 0x35, 0x8c, 0x77, 0x29, 0x26, 0xec, 0x51, 0xbb,
	0x22, 0xe2, 0x75, 0x69, 0x99, 0x9a, 0x9b, 0xc1, 0x13, 0xfa, 0xf2, 0x5a, 0x43, 0x9f, 0x8b, 0xeb,
	0x9a, 0x55, 0xdb, 0xf0, 0x1b, 0x2e, 0x2d, 0xfa, 0x1b, 0x2e, 0xf5, 0x36, 0x1c, 0x4b, 0x48, 0x1e,
	0x8d, 0x49, 0x72, 0x2c, 0x75, 0xc3, 0x74, 0xc3, 0x2c, 0x3a, 0x5e, 0xcd, 0xf1, 0xf4, 0x92, 0xe1,
	0x51, 0x5e, 0x3e, 0x7d, 0xb3, 0x50, 0xa2, 0xbe, 0x11, 0x24, 0xa2, 0x6a, 0xda, 0x86, 0x6f, 0x3a,
	0x36, 0xca, 0x66, 0xaa, 0x4e, 0xd5, 0x61, 0x3f, 0xf5, 0xe0, 0x17, 0xae, 0x1e, 0xae, 0x3a, 0x4e,
	0xd5, 0xa2, 0xba, 0x51, 0x37, 0x75, 0xc3, 0xb6, 0x1d, 0x9f, 0xa9, 0x60, 0x02, 0xb5, 0x0c, 0x90,
	0x37, 0x02, 0xab, 0x6b, 0x2c, 0xab, 0xeb, 0xf4, 0x5e, 0x83, 0x7a, 0xbe, 0xf6, 0x1a, 0x8c, 0xb6,
	0xac, 0x7a, 0x75, 0xc7, 0xf6, 0x28, 0x39, 0x0f, 0xfb, 0x78, 0xf6, 0xb3, 0xca, 0x31, 0x65, 0x6e,
	0x64, 0xfe, 0x50, 0xbe, 0xf5, 0x0c, 0xe5, 0xb9, 0xfc, 0xca, 0xe0, 0xe3, 0xdf, 0x8e, 0x0e, 0xac,
	0xa3, 0xac, 0x36, 0x0a, 0xff, 0x61, 0xc6, 0xd6, 0x1d, 0x8b, 0x86, 0x1e, 0x3e, 0x55, 0xd0, 0x31,
	0xae, 0xa2, 0x87, 0x0c, 0x0c, 0x39, 0xf7, 0x6d, 0xea, 0x32, 0x07, 0xc3, 0xeb, 0xfc, 0x81, 0x9c,
	0x84, 0x7f, 0x8b, 0xd3, 0x58, 0xac, 0x19, 0xb6, 0x51, 0xa5, 0x6e, 0x76, 0x0f, 0x13, 0xf8, 0x97,
	0x58, 0x5f, 0xe5, 0xcb, 0xe4, 0x50, 0x00, 0xb1, 0xe1, 0x51, 0x37, 0xbb, 0x97, 0x09, 0xe0, 0x53,
	0x60, 0x82, 0xe7, 0xb6, 0xec, 0xd8, 0xbe, 0xeb, 0x58, 0x16, 0x75, 0xb3, 0x83, 0xdc, 0x04, 0x5b,
	0x7f, 0x21, 0x5c, 0xd6, 0x2e, 0xc0, 0x38, 0x43, 0x76, 0x85, 0xfa, 0xcb, 0x68, 0x1d, 0x51, 0x13,
	0x15, 0xf6, 0x0b, 0x87, 0x88, 0x30, 0x7c, 0xd6, 0x6e, 0x43, 0x36, 0xa9, 0x86, 0x61, 0x2d, 0xc5,
	0xf4, 0x46, 0xe6, 0xb3, 0xf1, 0xd4, 0x09, 0x1d, 0x4c, 0x5e, 0x64, 0xb7, 0x84, 0x76, 0x97, 0x2d,
	0x4b, 0xc8, 0x88, 0x2c, 0x92, 0x97, 0x01, 0xa2, 0x53, 0x80, 0x96, 0x4f, 0xe4, 0xf9, 0x91, 0xc9,
	0x07, 0x47, 0x26, 0xcf, 0xdf, 0x78, 0x3c, 0x32, 0xf9, 0x35, 0xa3, 0x4a, 0x51, 0x77, 0xbd, 0x49,
	0x53, 0xfb, 0x5c, 0x81, 0x89, 0x14, 0x27, 0x88, 0xfe, 0x12, 0x0c, 0x0b, 0x34, 0x41, 0xe5, 0xf7,
	0x76, 0x01, 0x3f, 0x52, 0x20, 0x57, 0x5a, 0x30, 0xee, 0x61, 0x18, 0x67, 0x3b, 0x62, 0xe4, 0xae,
	0x5b, 0x40, 0x2e, 0x81, 0x26, 0x12, 0xbc, 0x46, 0xdd, 0x55, 0xfe, 0xe6, 0xad, 0x34, 0x5c, 0xfb,
	0x5a, 0xf0, 0x8e, 0x8b, 0x94, 0x64, 0x60, 0xa8, 0x42, 0x6d, 0xa7, 0x26, 0x4e, 0x10, 0x7b, 0xd0,
	0x1c, 0x98, 0x6e, 0xab, 0x8b, 0x91, 0xbe, 0x02, 0x10, 0x75, 0x0d, 0xcc, 0xe7, 0x74, 0xe2, 0x90,
	0x27, 0x0d, 0x88, 0xa8, 0x4b, 0x62, 0x41, 0xab, 0xa1, 0xc3, 0x65, 0xcb, 0x4a, 0x91, 0xef, 0x7b,
	0x01, 0x7f, 0x50, 0x60, 0xa6, 0xbd, 0x3f, 0x8c, 0xf0, 0x55, 0x18, 0x89, 0x22, 0x14, 0xd5, 0xec,
	0x21, 0x44, 0x08, 0x43, 0xec, 0x63, 0x65, 0xe7, 0xe0, 0x84, 0xa8, 0xce, 0x0a, 0xbf, 0x56, 0x96,
	0xed, 0xca, 0x2a, 0xbf, 0x54, 0xd6, 0x58, 0x63, 0x15, 0x6d, 0xa3, 0x0e, 0xb3, 0x1d, 0x25, 0x31,
	0xd2, 0x97, 0xb0, 0x13, 0x54, 0x30, 0xad, 0xb3, 0xf1, 0x20, 0x25, 0x06, 0xa2, 0xee, 0x15, 0x3c,
	0x69, 0xf3, 0x70, 0x4e, 0x78, 0xbc, 0xc1, 0xaf, 0x80, 0x65, 0xbb, 0xb2, 0x2e, 0x2e, 0x00, 0xcc,
	0x92, 0xd7, 0x8a, 0xf2, 0x3d, 0x05, 0x0a, 0x3d, 0x28, 0x21, 0xe0, 0xd7, 0x63, 0x80, 0x0b, 0x71,
	0xc0, 0x1d, 0x4d, 0xc5, 0xa0, 0x4f, 0xc3, 0x94, 0x40, 0xb1, 0x6a, 0x6c, 0x89, 0x82, 0x3a, 0x95,
	0xed, 0x1b, 0xe6, 0x03, 0x71, 0x8a, 0xb4, 0x3b, 0xd1, 0x5b, 0x95, 0x26, 0x84, 0xd8, 0x2e, 0xc3,
	0x3e, 0xa3, 0xe6, 0x34, 0x6c, 0xf1, 0x52, 0x68, 0x71, 0x6c, 0x49, 0x5d, 0x01, 0x86, 0xeb, 0x35,
	0x83, 0xb9, 0x4e, 0xb7, 0xfc, 0xe5, 0x4d, 0xc3, 0xb4, 0x8c, 0x92, 0x45, 0xaf, 0x07, 0x57, 0xbd,
	0x00, 0xf3, 0x66, 0x04, 0x26, 0x4d, 0x08, 0xc1, 0x14, 0x60, 0x88, 0x0d, 0x08, 0x88, 0x65, 0x2c,
	0x8e, 0x85, 0x49, 0xa3, 0x7b, 0x2e, 0xd9, 0xec, 0xfd, 0x86, 0xb8, 0x8c, 0x6f, 0x8a, 0xbb, 0x38,
	0x25, 0x15, 0x69, 0x42, 0xdd, 0xa6, 0x22, 0xa9, 0x1b, 0x4b, 0x45, 0x29, 0xba, 0x29, 0x6e, 0x06,
	0x77, 0xcf, 0x9a, 0x61, 0x86, 0x37, 0xcc, 0x34, 0x1c, 0xc4, 0xb1, 0xa4, 0xe2, 0xd4, 0x0c, 0x93,
	0xf7, 0x84, 0x83, 0xeb, 0x07, 0xf8, 0xe2, 0x8b, 0x6c, 0x8d, 0x4c, 0xc1, 0x81, 0xe6, 0xd9, 0x05,
	0xef, 0xc2, 0x11, 0xbe, 0xc6, 0x4c, 0x6a, 0x6b, 0xd8, 0xd0, 0x5b, 0x7d, 0x60, 0x08, 0x0b, 0x30,
	0x18, 0x8c, 0x18, 0x18, 0xc0, 0x44, 0x3c, 0x80, 0x50, 0x01, 0x71, 0x33, 0x61, 0xad, 0x1c, 0x5d,
	0x11, 0xa1, 0x40, 0xdf, 0xfb, 0xd8, 0x23, 0x05, 0xd4, 0x34, 0x2f, 0x61, 0xee, 0x47, 0xa2, 0x09,
	0x49, 0x74, 0xaf, 0x8e, 0xf8, 0xc1, 0x0f, 0x2d, 0xf5, 0xaf, 0x67, 0xdd, 0x8a, 0x8a, 0x78, 0xcb,
	0xa3, 0x95, 0xe6, 0x63, 0x1c, 0x14, 0xd1, 0x73, 0x1a, 0x6e, 0x39, 0x5e, 0x44, 0xbe, 0x88, 0x45,
	0xcc, 0x88, 0x53, 0x1c, 0x80, 0x18, 0x14, 0x07, 0xf5, 0x7a, 0x54, 0xb7, 0x26, 0xb3, 0xcf, 0x7f,
	0xf0, 0x9b, 0xaa, 0x16, 0xda, 0xeb, 0x7b, 0xd5, 0x1e, 0x36, 0x55, 0xad, 0xd9, 0x4b, 0x38, 0x3f,
	0x8c, 0x04, 0xfd, 0xa8, 0xc8, 0x10, 0x89, 0xaa, 0xb5, 0x05, 0x0f, 0x8d, 0xd0, 0x4a, 0xff, 0x2a,
	0xf6, 0x7f, 0x38, 0xc6, 0x27, 0xce, 0xe8, 0x35, 0x59, 0x15, 0x43, 0xbf, 0xc8, 0xc8, 0x24, 0x0c,
	0xf3, 0x92, 0x15, 0xcd, 0x0a, 0x56, 0x6d, 0x3f, 0x5f, 0xb8, 0x5a, 0xd1, 0xde, 0x57, 0xb0, 0x8b,
	0xa4, 0x5b, 0xc0, 0x68, 0xdf, 0x86, 0x43, 0xe9, 0xc4, 0x02, 0x13, 0x3c, 0x13, 0x0f, 0x3c, 0xcd,
	0x1a, 0xe6, 0x21, 0xe3, 0xa6, 0xec, 0x69, 0x77, 0xdb, 0xc0, 0xe8, 0x7b, 0x6d, 0x7f, 0x56, 0xb0,
	0x2b, 0x4a, 0xbc, 0x61, 0xd4, 0x25, 0x18, 0x4f, 0x8f, 0x5a, 0xd4, 0xbb, 0x97, 0xb0, 0xc7, 0xd2,
	0xc2, 0xee, 0xe3, 0x49, 0x38, 0x06, 0x39, 0x16, 0x52, 0x30, 0x01, 0xe0, 0xad, 0x75, 0x9b, 0xba,
	0x9e, 0xe9, 0xd8, 0xe2, 0x2a, 0xb8, 0x08, 0x47, 0xa5, 0x12, 0x18, 0x71, 0x16, 0xfe, 0xb1, 0xc9,
	0x97, 0xf0, 0xa0, 0x88, 0x47, 0x6d, 0x0a, 0x95, 0xaf, 0x39, 0x65, 0xc3, 0x4a, 0xb7, 0x7f, 0x09,
	0xcf, 0x62, 0xaa, 0x48, 0x47, 0x07, 0x13, 0xc8, 0x50, 0x98, 0x36, 0x6f, 0x27, 0xc2, 0xf0, 0x22,
	0xb6, 0xa5, 0x96, 0x2d, 0x34, 0xd8, 0xee, 0x70, 0xcf, 0xff, 0x94, 0x85, 0x21, 0xa6, 0x49, 0x6a,
	0x30, 0xc4, 0x48, 0x19, 0x99, 0x8a, 0x97, 0x2c, 0x41, 0xe3, 0x54, 0xad, 0x9d, 0x08, 0x77, 0xab,
	0x1d, 0x79, 0xe7, 0x97, 0x3f, 0x3e, 0xd9, 0x33, 0x4e, 0xc6, 0xe2, 0x9f, 0x10, 0x5c, 0xe6, 0xe5,
	0x23, 0x05, 0xf6, 0x0b, 0xf6, 0x40, 0x66, 0x53, 0xed, 0x25, 0x99, 0x98, 0x3a, 0xd7, 0x59, 0x10,
	0xdd, 0x9f, 0x61, 0xee, 0x4f, 0x90, 0x19, 0x5d, 0xf2, 0x81, 0xc3, 0xd3, 0x77, 0xc4, 0xcf, 0x5d,
	0xf2, 0xae, 0x02, 0xc3, 0x21, 0x03, 0x22, 0xe9, 0x5e, 0x52, 0x98, 0x98, 0x7a, 0xb2, 0x0b, 0x49,
	0x04, 0x34, 0xc5, 0x00, 0x4d, 0x92, 0x09, 0x29, 0x20, 0xf2, 0x9d, 0x02, 0xa3, 0x29, 0x33, 0x38,
	0x99, 0x97, 0x45, 0x2d, 0x27, 0x44, 0xea, 0x42, 0x4f, 0x3a, 0x88, 0x71, 0x91, 0x61, 0x2c, 0x10,
	0x5d, 0xef, 0xea, 0x03, 0x8b, 0xa7, 0xef, 0x30, 0x9e, 0xb5, 0x4b, 0xbe, 0x55, 0x20, 0x93, 0x46,
	0x40, 0xc8, 0x82, 0x2c, 0x41, 0x6d, 0xe8, 0x91, 0x7a, 0xbe, 0x37, 0x25, 0x04, 0xaf, 0x33, 0xf0,
	0x27, 0xc9, 0x6c, 0x97, 0xe0, 0xc9, 0x8f, 0x0a, 0x8c, 0x4b, 0xd8, 0x00, 0xf9, 0xaf, 0x2c, 0x7d,
	0xed, 0x99, 0x8a, 0xba, 0xd8, 0xb3, 0x1e, 0xa2, 0x9f, 0x67, 0xe8, 0xcf, 0x90, 0x53, 0xdd, 0x7f,
	0x71, 0x23, 0x7f, 0x2a, 0x30, 0xd5, 0x91, 0x1d, 0x90, 0xcb, 0x32, 0x48, 0xdd, 0x12, 0x1b, 0x75,
	0xf9, 0x6f, 0x58, 0xc0, 0xf0, 0xfe, 0xc7, 0xc2, 0x5b, 0x24, 0x17, 0xf4, 0xe7, 0xf9, 0xc0, 0x46,
	0xbe, 0x56, 0x80, 0x24, 0xb9, 0x06, 0x29, 0xc8, 0x80, 0x49, 0x89, 0x8f, 0x3a, 0xdf, 0x8b, 0x0a,
	0x82, 0x3f, 0xcb, 0xc0, 0xcf, 0x92, 0xe3, 0x7a, 0x37, 0x1f, 0x37, 0xc9, 0x57, 0x0a, 0x90, 0x24,
	0x8f, 0x91, 0x83, 0x95, 0x12, 0x23, 0x39, 0x58, 0x39, 0x4d, 0x92, 0x37, 0x3e, 0x9b, 0x6e, 0xf9,
	0x45, 0x43, 0x28, 0xf1, 0xb1, 0x8c, 0x7c, 0xa9, 0x00, 0x49, 0x32, 0x17, 0x39, 0x56, 0x29, 0x8d,
	0x92, 0x63, 0x95, 0x93, 0x2a, 0xed, 0x34, 0xc3, 0x7a, 0x9c, 0x4c, 0xeb, 0x9d, 0x3f, 0x9d, 0x92,
	0x2f, 0x14, 0x18, 0x0e, 0x67, 0x7c, 0x22, 0xbd, 0x09, 0xe2, 0xdc, 0x4a, 0xd2, 0xa3, 0xd3, 0x18,
	0x92, 0xb6, 0xc2, 0xf0, 0x5c, 0x22, 0x4b, 0xba, 0xf4, 0x03, 0xad, 0xa7, 0xef, 0xb4, 0x30, 0xb5,
	0xdd, 0xf0, 0x99, 0xc9, 0xec, 0x92, 0x0f, 0x15, 0x80, 0x88, 0xc3, 0x10, 0xe9, 0x0d, 0x91, 0x60,
	0x53, 0xea, 0xa9, 0x6e, 0x44, 0x11, 0xe9, 0x34, 0x43, 0x7a, 0x84, 0x4c, 0xb6, 0x41, 0x4a, 0x3e,
	0x53, 0x60, 0x38, 0x1c, 0xcc, 0xe5, 0x19, 0x8b, 0x13, 0x19, 0x79, 0xc6, 0x12, 0xdc, 0x44, 0xbb,
	0xc8, 0x70, 0x5c, 0x20, 0x0b, 0x71, 0x1c, 0x4d, 0xa3, 0xbf, 0xbe, 0xd3, 0x42, 0x8b, 0x76, 0xf5,
	0x1d, 0xb6, 0xce, 0x53, 0x15, 0x11, 0x07, 0x79, 0xaa, 0x12, 0x14, 0x46, 0x9e, 0xaa, 0x24, 0x0f,
	0x91, 0xa7, 0xaa, 0x09, 0x22, 0xf9, 0x5e, 0x81, 0x4c, 0xda, 0x68, 0x4a, 0xce, 0xa5, 0x8f, 0x3a,
	0x72, 0x32, 0xa1, 0x16, 0x7a, 0xd0, 0xe8, 0x94, 0x45, 0xc9, 0x70, 0xad, 0xef, 0x84, 0x13, 0xdd,
	0x2e, 0xf9, 0x46, 0x81, 0xb1, 0xd4, 0x29, 0x9d, 0x74, 0x8f, 0xc4, 0x6b, 0xff, 0x16, 0xb7, 0x25,
	0x01, 0xf2, 0x8b, 0x57, 0x82, 0x9e, 0x3c, 0x54, 0x80, 0x24, 0x47, 0x6c, 0x92, 0x4f, 0xf5, 0x2d,
	0x9d, 0xd6, 0x55, 0xbd, 0x6b, 0xf9, 0x4e, 0xad, 0x91, 0x4d, 0x05, 0xa2, 0x91, 0xe3, 0xb8, 0x4d,
	0x1e, 0x29, 0x30, 0x9a, 0x32, 0xa8, 0x93, 0x74, 0xb7, 0xf2, 0xa9, 0x5f, 0x3d, 0xd7, 0xbd, 0x42,
	0xa7, 0x0b, 0xc7, 0x0a, 0x94, 0x12, 0x48, 0x3f, 0x50, 0x60, 0xa4, 0x69, 0xf2, 0x97, 0x8c, 0xd3,
	0x49, 0xda, 0x20, 0x19, 0xa7, 0x53, 0x48, 0x84, 0x36, 0xc3, 0x10, 0xe5, 0xc8, 0xe1, 0x74, 0x44,
	0xfc, 0x38, 0xae, 0x5c, 0x7d, 0xfc, 0x34, 0xa7, 0x3c, 0x79, 0x9a, 0x53, 0x7e, 0x7f, 0x9a, 0x53,
	0x3e, 0x7e, 0x96, 0x1b, 0x78, 0xf2, 0x2c, 0x37, 0xf0, 0xeb, 0xb3, 0xdc, 0xc0, 0x5b, 0x7a, 0xd5,
	0xf4, 0x37, 0x1a, 0xa5, 0x7c, 0xd9, 0xa9, 0xe9, 0xf7, 0xef, 0x94, 0x2c, 0xa7, 0x7c, 0xb7, 0xbc,
	0x61, 0x98, 0xb6, 0x6e, 0x3b, 0x25, 0x8b, 0x9e, 0x65, 0xd6, 0xb6, 0xb8, 0x51, 0x7f, 0xbb, 0x4e,
	0xbd, 0xd2, 0x3e, 0xf6, 0x47, 0xd5, 0xc2, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x94, 0xb0, 0x2b,
	0x3e, 0xcc, 0x1c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Roles(ctx context.Context, in *QueryRolesRequest, opts ...grpc.CallOption) (*QueryRolesResponse, error)
	// Queries an Attester by index
	Attester(ctx context.Context, in *QueryGetAttesterRequest, opts ...grpc.CallOption) (*QueryGetAttesterResponse, error)
	// Queries a list of Attesters
	Attesters(ctx context.Context, in *QueryAllAttestersRequest, opts ...grpc.CallOption) (*QueryAllAttestersResponse, error)
	// Queries a PerMessageBurnLimit by index
	PerMessageBurnLimit(ctx context.Context, in *QueryGetPerMessageBurnLimitRequest, opts ...grpc.CallOption) (*QueryGetPerMessageBurnLimitResponse, error)
	// Queries a list of PerMessageBurnLimits
	PerMessageBurnLimits(ctx context.Context, in *QueryAllPerMessageBurnLimitsRequest, opts ...grpc.CallOption) (*QueryAllPerMessageBurnLimitsResponse, error)
	// Queries BurningAndMintingPaused
	BurningAndMintingPaused(ctx context.Context, in *QueryGetBurningAndMintingPausedRequest, opts ...grpc.CallOption) (*QueryGetBurningAndMintingPausedResponse, error)
	// Queries SendingAndReceivingPaused
	SendingAndReceivingMessagesPaused(ctx context.Context, in *QueryGetSendingAndReceivingMessagesPausedRequest, opts ...grpc.CallOption) (*QueryGetSendingAndReceivingMessagesPausedResponse, error)
	// Queries the MaxMessageBodySize
	MaxMessageBodySize(ctx context.Context, in *QueryGetMaxMessageBodySizeRequest, opts ...grpc.CallOption) (*QueryGetMaxMessageBodySizeResponse, error)
	// Queries the NextAvailableNonce
	NextAvailableNonce(ctx context.Context, in *QueryGetNextAvailableNonceRequest, opts ...grpc.CallOption) (*QueryGetNextAvailableNonceResponse, error)
	// Queries the SignatureThreshold
	SignatureThreshold(ctx context.Context, in *QueryGetSignatureThresholdRequest, opts ...grpc.CallOption) (*QueryGetSignatureThresholdResponse, error)
	// Queries a TokenPair by index
	TokenPair(ctx context.Context, in *QueryGetTokenPairRequest, opts ...grpc.CallOption) (*QueryGetTokenPairResponse, error)
	// Queries a list of TokenPair
	TokenPairs(ctx context.Context, in *QueryAllTokenPairsRequest, opts ...grpc.CallOption) (*QueryAllTokenPairsResponse, error)
	// Queries a UsedNonce by index
	UsedNonce(ctx context.Context, in *QueryGetUsedNonceRequest, opts ...grpc.CallOption) (*QueryGetUsedNonceResponse, error)
	// Queries a list of UsedNonces
	UsedNonces(ctx context.Context, in *QueryAllUsedNoncesRequest, opts ...grpc.CallOption) (*QueryAllUsedNoncesResponse, error)
	// Query the RemoteTokenMessenger of a specific domain.
	RemoteTokenMessenger(ctx context.Context, in *QueryRemoteTokenMessengerRequest, opts ...grpc.CallOption) (*QueryRemoteTokenMessengerResponse, error)
	// Query all RemoteTokenMessenger's.
	RemoteTokenMessengers(ctx context.Context, in *QueryRemoteTokenMessengersRequest, opts ...grpc.CallOption) (*QueryRemoteTokenMessengersResponse, error)
	BurnMessageVersion(ctx context.Context, in *QueryBurnMessageVersionRequest, opts ...grpc.CallOption) (*QueryBurnMessageVersionResponse, error)
	LocalMessageVersion(ctx context.Context, in *QueryLocalMessageVersionRequest, opts ...grpc.CallOption) (*QueryLocalMessageVersionResponse, error)
	LocalDomain(ctx context.Context, in *QueryLocalDomainRequest, opts ...grpc.CallOption) (*QueryLocalDomainResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Roles(ctx context.Context, in *QueryRolesRequest, opts ...grpc.CallOption) (*QueryRolesResponse, error) {
	out := new(QueryRolesResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/Roles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attester(ctx context.Context, in *QueryGetAttesterRequest, opts ...grpc.CallOption) (*QueryGetAttesterResponse, error) {
	out := new(QueryGetAttesterResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/Attester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Attesters(ctx context.Context, in *QueryAllAttestersRequest, opts ...grpc.CallOption) (*QueryAllAttestersResponse, error) {
	out := new(QueryAllAttestersResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/Attesters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerMessageBurnLimit(ctx context.Context, in *QueryGetPerMessageBurnLimitRequest, opts ...grpc.CallOption) (*QueryGetPerMessageBurnLimitResponse, error) {
	out := new(QueryGetPerMessageBurnLimitResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/PerMessageBurnLimit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PerMessageBurnLimits(ctx context.Context, in *QueryAllPerMessageBurnLimitsRequest, opts ...grpc.CallOption) (*QueryAllPerMessageBurnLimitsResponse, error) {
	out := new(QueryAllPerMessageBurnLimitsResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/PerMessageBurnLimits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurningAndMintingPaused(ctx context.Context, in *QueryGetBurningAndMintingPausedRequest, opts ...grpc.CallOption) (*QueryGetBurningAndMintingPausedResponse, error) {
	out := new(QueryGetBurningAndMintingPausedResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/BurningAndMintingPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendingAndReceivingMessagesPaused(ctx context.Context, in *QueryGetSendingAndReceivingMessagesPausedRequest, opts ...grpc.CallOption) (*QueryGetSendingAndReceivingMessagesPausedResponse, error) {
	out := new(QueryGetSendingAndReceivingMessagesPausedResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/SendingAndReceivingMessagesPaused", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaxMessageBodySize(ctx context.Context, in *QueryGetMaxMessageBodySizeRequest, opts ...grpc.CallOption) (*QueryGetMaxMessageBodySizeResponse, error) {
	out := new(QueryGetMaxMessageBodySizeResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/MaxMessageBodySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextAvailableNonce(ctx context.Context, in *QueryGetNextAvailableNonceRequest, opts ...grpc.CallOption) (*QueryGetNextAvailableNonceResponse, error) {
	out := new(QueryGetNextAvailableNonceResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/NextAvailableNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SignatureThreshold(ctx context.Context, in *QueryGetSignatureThresholdRequest, opts ...grpc.CallOption) (*QueryGetSignatureThresholdResponse, error) {
	out := new(QueryGetSignatureThresholdResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/SignatureThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPair(ctx context.Context, in *QueryGetTokenPairRequest, opts ...grpc.CallOption) (*QueryGetTokenPairResponse, error) {
	out := new(QueryGetTokenPairResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/TokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TokenPairs(ctx context.Context, in *QueryAllTokenPairsRequest, opts ...grpc.CallOption) (*QueryAllTokenPairsResponse, error) {
	out := new(QueryAllTokenPairsResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/TokenPairs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UsedNonce(ctx context.Context, in *QueryGetUsedNonceRequest, opts ...grpc.CallOption) (*QueryGetUsedNonceResponse, error) {
	out := new(QueryGetUsedNonceResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/UsedNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UsedNonces(ctx context.Context, in *QueryAllUsedNoncesRequest, opts ...grpc.CallOption) (*QueryAllUsedNoncesResponse, error) {
	out := new(QueryAllUsedNoncesResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/UsedNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RemoteTokenMessenger(ctx context.Context, in *QueryRemoteTokenMessengerRequest, opts ...grpc.CallOption) (*QueryRemoteTokenMessengerResponse, error) {
	out := new(QueryRemoteTokenMessengerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/RemoteTokenMessenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RemoteTokenMessengers(ctx context.Context, in *QueryRemoteTokenMessengersRequest, opts ...grpc.CallOption) (*QueryRemoteTokenMessengersResponse, error) {
	out := new(QueryRemoteTokenMessengersResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/RemoteTokenMessengers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BurnMessageVersion(ctx context.Context, in *QueryBurnMessageVersionRequest, opts ...grpc.CallOption) (*QueryBurnMessageVersionResponse, error) {
	out := new(QueryBurnMessageVersionResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/BurnMessageVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LocalMessageVersion(ctx context.Context, in *QueryLocalMessageVersionRequest, opts ...grpc.CallOption) (*QueryLocalMessageVersionResponse, error) {
	out := new(QueryLocalMessageVersionResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/LocalMessageVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LocalDomain(ctx context.Context, in *QueryLocalDomainRequest, opts ...grpc.CallOption) (*QueryLocalDomainResponse, error) {
	out := new(QueryLocalDomainResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Query/LocalDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Roles(context.Context, *QueryRolesRequest) (*QueryRolesResponse, error)
	// Queries an Attester by index
	Attester(context.Context, *QueryGetAttesterRequest) (*QueryGetAttesterResponse, error)
	// Queries a list of Attesters
	Attesters(context.Context, *QueryAllAttestersRequest) (*QueryAllAttestersResponse, error)
	// Queries a PerMessageBurnLimit by index
	PerMessageBurnLimit(context.Context, *QueryGetPerMessageBurnLimitRequest) (*QueryGetPerMessageBurnLimitResponse, error)
	// Queries a list of PerMessageBurnLimits
	PerMessageBurnLimits(context.Context, *QueryAllPerMessageBurnLimitsRequest) (*QueryAllPerMessageBurnLimitsResponse, error)
	// Queries BurningAndMintingPaused
	BurningAndMintingPaused(context.Context, *QueryGetBurningAndMintingPausedRequest) (*QueryGetBurningAndMintingPausedResponse, error)
	// Queries SendingAndReceivingPaused
	SendingAndReceivingMessagesPaused(context.Context, *QueryGetSendingAndReceivingMessagesPausedRequest) (*QueryGetSendingAndReceivingMessagesPausedResponse, error)
	// Queries the MaxMessageBodySize
	MaxMessageBodySize(context.Context, *QueryGetMaxMessageBodySizeRequest) (*QueryGetMaxMessageBodySizeResponse, error)
	// Queries the NextAvailableNonce
	NextAvailableNonce(context.Context, *QueryGetNextAvailableNonceRequest) (*QueryGetNextAvailableNonceResponse, error)
	// Queries the SignatureThreshold
	SignatureThreshold(context.Context, *QueryGetSignatureThresholdRequest) (*QueryGetSignatureThresholdResponse, error)
	// Queries a TokenPair by index
	TokenPair(context.Context, *QueryGetTokenPairRequest) (*QueryGetTokenPairResponse, error)
	// Queries a list of TokenPair
	TokenPairs(context.Context, *QueryAllTokenPairsRequest) (*QueryAllTokenPairsResponse, error)
	// Queries a UsedNonce by index
	UsedNonce(context.Context, *QueryGetUsedNonceRequest) (*QueryGetUsedNonceResponse, error)
	// Queries a list of UsedNonces
	UsedNonces(context.Context, *QueryAllUsedNoncesRequest) (*QueryAllUsedNoncesResponse, error)
	// Query the RemoteTokenMessenger of a specific domain.
	RemoteTokenMessenger(context.Context, *QueryRemoteTokenMessengerRequest) (*QueryRemoteTokenMessengerResponse, error)
	// Query all RemoteTokenMessenger's.
	RemoteTokenMessengers(context.Context, *QueryRemoteTokenMessengersRequest) (*QueryRemoteTokenMessengersResponse, error)
	BurnMessageVersion(context.Context, *QueryBurnMessageVersionRequest) (*QueryBurnMessageVersionResponse, error)
	LocalMessageVersion(context.Context, *QueryLocalMessageVersionRequest) (*QueryLocalMessageVersionResponse, error)
	LocalDomain(context.Context, *QueryLocalDomainRequest) (*QueryLocalDomainResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Roles(ctx context.Context, req *QueryRolesRequest) (*QueryRolesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Roles not implemented")
}
func (*UnimplementedQueryServer) Attester(ctx context.Context, req *QueryGetAttesterRequest) (*QueryGetAttesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attester not implemented")
}
func (*UnimplementedQueryServer) Attesters(ctx context.Context, req *QueryAllAttestersRequest) (*QueryAllAttestersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Attesters not implemented")
}
func (*UnimplementedQueryServer) PerMessageBurnLimit(ctx context.Context, req *QueryGetPerMessageBurnLimitRequest) (*QueryGetPerMessageBurnLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerMessageBurnLimit not implemented")
}
func (*UnimplementedQueryServer) PerMessageBurnLimits(ctx context.Context, req *QueryAllPerMessageBurnLimitsRequest) (*QueryAllPerMessageBurnLimitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerMessageBurnLimits not implemented")
}
func (*UnimplementedQueryServer) BurningAndMintingPaused(ctx context.Context, req *QueryGetBurningAndMintingPausedRequest) (*QueryGetBurningAndMintingPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurningAndMintingPaused not implemented")
}
func (*UnimplementedQueryServer) SendingAndReceivingMessagesPaused(ctx context.Context, req *QueryGetSendingAndReceivingMessagesPausedRequest) (*QueryGetSendingAndReceivingMessagesPausedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendingAndReceivingMessagesPaused not implemented")
}
func (*UnimplementedQueryServer) MaxMessageBodySize(ctx context.Context, req *QueryGetMaxMessageBodySizeRequest) (*QueryGetMaxMessageBodySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxMessageBodySize not implemented")
}
func (*UnimplementedQueryServer) NextAvailableNonce(ctx context.Context, req *QueryGetNextAvailableNonceRequest) (*QueryGetNextAvailableNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextAvailableNonce not implemented")
}
func (*UnimplementedQueryServer) SignatureThreshold(ctx context.Context, req *QueryGetSignatureThresholdRequest) (*QueryGetSignatureThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SignatureThreshold not implemented")
}
func (*UnimplementedQueryServer) TokenPair(ctx context.Context, req *QueryGetTokenPairRequest) (*QueryGetTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPair not implemented")
}
func (*UnimplementedQueryServer) TokenPairs(ctx context.Context, req *QueryAllTokenPairsRequest) (*QueryAllTokenPairsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TokenPairs not implemented")
}
func (*UnimplementedQueryServer) UsedNonce(ctx context.Context, req *QueryGetUsedNonceRequest) (*QueryGetUsedNonceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsedNonce not implemented")
}
func (*UnimplementedQueryServer) UsedNonces(ctx context.Context, req *QueryAllUsedNoncesRequest) (*QueryAllUsedNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UsedNonces not implemented")
}
func (*UnimplementedQueryServer) RemoteTokenMessenger(ctx context.Context, req *QueryRemoteTokenMessengerRequest) (*QueryRemoteTokenMessengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteTokenMessenger not implemented")
}
func (*UnimplementedQueryServer) RemoteTokenMessengers(ctx context.Context, req *QueryRemoteTokenMessengersRequest) (*QueryRemoteTokenMessengersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoteTokenMessengers not implemented")
}
func (*UnimplementedQueryServer) BurnMessageVersion(ctx context.Context, req *QueryBurnMessageVersionRequest) (*QueryBurnMessageVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BurnMessageVersion not implemented")
}
func (*UnimplementedQueryServer) LocalMessageVersion(ctx context.Context, req *QueryLocalMessageVersionRequest) (*QueryLocalMessageVersionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalMessageVersion not implemented")
}
func (*UnimplementedQueryServer) LocalDomain(ctx context.Context, req *QueryLocalDomainRequest) (*QueryLocalDomainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LocalDomain not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Roles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRolesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Roles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/Roles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Roles(ctx, req.(*QueryRolesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetAttesterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/Attester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attester(ctx, req.(*QueryGetAttesterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Attesters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllAttestersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Attesters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/Attesters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Attesters(ctx, req.(*QueryAllAttestersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerMessageBurnLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPerMessageBurnLimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerMessageBurnLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/PerMessageBurnLimit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerMessageBurnLimit(ctx, req.(*QueryGetPerMessageBurnLimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PerMessageBurnLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPerMessageBurnLimitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PerMessageBurnLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/PerMessageBurnLimits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PerMessageBurnLimits(ctx, req.(*QueryAllPerMessageBurnLimitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurningAndMintingPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBurningAndMintingPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurningAndMintingPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/BurningAndMintingPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurningAndMintingPaused(ctx, req.(*QueryGetBurningAndMintingPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendingAndReceivingMessagesPaused_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSendingAndReceivingMessagesPausedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendingAndReceivingMessagesPaused(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/SendingAndReceivingMessagesPaused",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendingAndReceivingMessagesPaused(ctx, req.(*QueryGetSendingAndReceivingMessagesPausedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaxMessageBodySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMaxMessageBodySizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaxMessageBodySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/MaxMessageBodySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaxMessageBodySize(ctx, req.(*QueryGetMaxMessageBodySizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextAvailableNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNextAvailableNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextAvailableNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/NextAvailableNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextAvailableNonce(ctx, req.(*QueryGetNextAvailableNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SignatureThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSignatureThresholdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SignatureThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/SignatureThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SignatureThreshold(ctx, req.(*QueryGetSignatureThresholdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTokenPairRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/TokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPair(ctx, req.(*QueryGetTokenPairRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TokenPairs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTokenPairsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TokenPairs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/TokenPairs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TokenPairs(ctx, req.(*QueryAllTokenPairsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UsedNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetUsedNonceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UsedNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/UsedNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UsedNonce(ctx, req.(*QueryGetUsedNonceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UsedNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllUsedNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UsedNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/UsedNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UsedNonces(ctx, req.(*QueryAllUsedNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RemoteTokenMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRemoteTokenMessengerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RemoteTokenMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/RemoteTokenMessenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RemoteTokenMessenger(ctx, req.(*QueryRemoteTokenMessengerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RemoteTokenMessengers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRemoteTokenMessengersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RemoteTokenMessengers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/RemoteTokenMessengers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RemoteTokenMessengers(ctx, req.(*QueryRemoteTokenMessengersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BurnMessageVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBurnMessageVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BurnMessageVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/BurnMessageVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BurnMessageVersion(ctx, req.(*QueryBurnMessageVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LocalMessageVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLocalMessageVersionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LocalMessageVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/LocalMessageVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LocalMessageVersion(ctx, req.(*QueryLocalMessageVersionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LocalDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLocalDomainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LocalDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Query/LocalDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LocalDomain(ctx, req.(*QueryLocalDomainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "circle.cctp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Roles",
			Handler:    _Query_Roles_Handler,
		},
		{
			MethodName: "Attester",
			Handler:    _Query_Attester_Handler,
		},
		{
			MethodName: "Attesters",
			Handler:    _Query_Attesters_Handler,
		},
		{
			MethodName: "PerMessageBurnLimit",
			Handler:    _Query_PerMessageBurnLimit_Handler,
		},
		{
			MethodName: "PerMessageBurnLimits",
			Handler:    _Query_PerMessageBurnLimits_Handler,
		},
		{
			MethodName: "BurningAndMintingPaused",
			Handler:    _Query_BurningAndMintingPaused_Handler,
		},
		{
			MethodName: "SendingAndReceivingMessagesPaused",
			Handler:    _Query_SendingAndReceivingMessagesPaused_Handler,
		},
		{
			MethodName: "MaxMessageBodySize",
			Handler:    _Query_MaxMessageBodySize_Handler,
		},
		{
			MethodName: "NextAvailableNonce",
			Handler:    _Query_NextAvailableNonce_Handler,
		},
		{
			MethodName: "SignatureThreshold",
			Handler:    _Query_SignatureThreshold_Handler,
		},
		{
			MethodName: "TokenPair",
			Handler:    _Query_TokenPair_Handler,
		},
		{
			MethodName: "TokenPairs",
			Handler:    _Query_TokenPairs_Handler,
		},
		{
			MethodName: "UsedNonce",
			Handler:    _Query_UsedNonce_Handler,
		},
		{
			MethodName: "UsedNonces",
			Handler:    _Query_UsedNonces_Handler,
		},
		{
			MethodName: "RemoteTokenMessenger",
			Handler:    _Query_RemoteTokenMessenger_Handler,
		},
		{
			MethodName: "RemoteTokenMessengers",
			Handler:    _Query_RemoteTokenMessengers_Handler,
		},
		{
			MethodName: "BurnMessageVersion",
			Handler:    _Query_BurnMessageVersion_Handler,
		},
		{
			MethodName: "LocalMessageVersion",
			Handler:    _Query_LocalMessageVersion_Handler,
		},
		{
			MethodName: "LocalDomain",
			Handler:    _Query_LocalDomain_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circle/cctp/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRolesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRolesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRolesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryRolesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRolesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRolesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenController) > 0 {
		i -= len(m.TokenController)
		copy(dAtA[i:], m.TokenController)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenController)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pauser) > 0 {
		i -= len(m.Pauser)
		copy(dAtA[i:], m.Pauser)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Pauser)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AttesterManager) > 0 {
		i -= len(m.AttesterManager)
		copy(dAtA[i:], m.AttesterManager)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AttesterManager)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttesterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttesterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttesterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attester) > 0 {
		i -= len(m.Attester)
		copy(dAtA[i:], m.Attester)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Attester)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetAttesterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetAttesterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetAttesterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Attester.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllAttestersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllAttestersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllAttestersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Attesters) > 0 {
		for iNdEx := len(m.Attesters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attesters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPerMessageBurnLimitRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPerMessageBurnLimitRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPerMessageBurnLimitRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPerMessageBurnLimitResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPerMessageBurnLimitResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPerMessageBurnLimitResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.BurnLimit.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPerMessageBurnLimitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPerMessageBurnLimitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPerMessageBurnLimitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPerMessageBurnLimitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPerMessageBurnLimitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPerMessageBurnLimitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BurnLimits) > 0 {
		for iNdEx := len(m.BurnLimits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BurnLimits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBurningAndMintingPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBurningAndMintingPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBurningAndMintingPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetBurningAndMintingPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBurningAndMintingPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBurningAndMintingPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Paused.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Paused.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetMaxMessageBodySizeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMaxMessageBodySizeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMaxMessageBodySizeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetMaxMessageBodySizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMaxMessageBodySizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMaxMessageBodySizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetNextAvailableNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNextAvailableNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNextAvailableNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetNextAvailableNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNextAvailableNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNextAvailableNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Nonce.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureThresholdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureThresholdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureThresholdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSignatureThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSignatureThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSignatureThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenPairRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenPairRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenPairRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RemoteToken) > 0 {
		i -= len(m.RemoteToken)
		copy(dAtA[i:], m.RemoteToken)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.RemoteToken)))
		i--
		dAtA[i] = 0x12
	}
	if m.RemoteDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTokenPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTokenPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTokenPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pair.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenPairsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenPairsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenPairsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTokenPairsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTokenPairsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTokenPairsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenPairs) > 0 {
		for iNdEx := len(m.TokenPairs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TokenPairs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUsedNonceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUsedNonceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUsedNonceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x10
	}
	if m.SourceDomain != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SourceDomain))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetUsedNonceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetUsedNonceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetUsedNonceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Nonce.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllUsedNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUsedNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUsedNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllUsedNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllUsedNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllUsedNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.UsedNonces) > 0 {
		for iNdEx := len(m.UsedNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UsedNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRemoteTokenMessengerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemoteTokenMessengerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemoteTokenMessengerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DomainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRemoteTokenMessengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemoteTokenMessengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemoteTokenMessengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RemoteTokenMessenger.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryRemoteTokenMessengersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemoteTokenMessengersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemoteTokenMessengersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRemoteTokenMessengersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRemoteTokenMessengersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRemoteTokenMessengersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RemoteTokenMessengers) > 0 {
		for iNdEx := len(m.RemoteTokenMessengers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RemoteTokenMessengers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryBurnMessageVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnMessageVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnMessageVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryBurnMessageVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBurnMessageVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBurnMessageVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLocalMessageVersionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocalMessageVersionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLocalMessageVersionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLocalMessageVersionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocalMessageVersionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLocalMessageVersionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Version != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Version))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLocalDomainRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocalDomainRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLocalDomainRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLocalDomainResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLocalDomainResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLocalDomainResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.DomainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRolesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryRolesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AttesterManager)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Pauser)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenController)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAttesterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Attester)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetAttesterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Attester.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllAttestersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllAttestersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Attesters) > 0 {
		for _, e := range m.Attesters {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPerMessageBurnLimitRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPerMessageBurnLimitResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BurnLimit.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPerMessageBurnLimitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPerMessageBurnLimitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BurnLimits) > 0 {
		for _, e := range m.BurnLimits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBurningAndMintingPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetBurningAndMintingPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Paused.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Paused.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetMaxMessageBodySizeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetMaxMessageBodySizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetNextAvailableNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetNextAvailableNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Nonce.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSignatureThresholdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSignatureThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTokenPairRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RemoteDomain != 0 {
		n += 1 + sovQuery(uint64(m.RemoteDomain))
	}
	l = len(m.RemoteToken)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTokenPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pair.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTokenPairsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTokenPairsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TokenPairs) > 0 {
		for _, e := range m.TokenPairs {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetUsedNonceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SourceDomain != 0 {
		n += 1 + sovQuery(uint64(m.SourceDomain))
	}
	if m.Nonce != 0 {
		n += 1 + sovQuery(uint64(m.Nonce))
	}
	return n
}

func (m *QueryGetUsedNonceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Nonce.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllUsedNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllUsedNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.UsedNonces) > 0 {
		for _, e := range m.UsedNonces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRemoteTokenMessengerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainId != 0 {
		n += 1 + sovQuery(uint64(m.DomainId))
	}
	return n
}

func (m *QueryRemoteTokenMessengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.RemoteTokenMessenger.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryRemoteTokenMessengersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRemoteTokenMessengersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RemoteTokenMessengers) > 0 {
		for _, e := range m.RemoteTokenMessengers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBurnMessageVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryBurnMessageVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovQuery(uint64(m.Version))
	}
	return n
}

func (m *QueryLocalMessageVersionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLocalMessageVersionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Version != 0 {
		n += 1 + sovQuery(uint64(m.Version))
	}
	return n
}

func (m *QueryLocalDomainRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLocalDomainResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DomainId != 0 {
		n += 1 + sovQuery(uint64(m.DomainId))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRolesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRolesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRolesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRolesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRolesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRolesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttesterManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AttesterManager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pauser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pauser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenController", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenController = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttesterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttesterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttesterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetAttesterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetAttesterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetAttesterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Attester.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllAttestersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllAttestersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllAttestersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attesters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attesters = append(m.Attesters, Attester{})
			if err := m.Attesters[len(m.Attesters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPerMessageBurnLimitRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPerMessageBurnLimitResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPerMessageBurnLimitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnLimit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnLimit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPerMessageBurnLimitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPerMessageBurnLimitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPerMessageBurnLimitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPerMessageBurnLimitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPerMessageBurnLimitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPerMessageBurnLimitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnLimits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnLimits = append(m.BurnLimits, PerMessageBurnLimit{})
			if err := m.BurnLimits[len(m.BurnLimits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBurningAndMintingPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBurningAndMintingPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBurningAndMintingPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Paused.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendingAndReceivingMessagesPausedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendingAndReceivingMessagesPausedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendingAndReceivingMessagesPausedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paused", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Paused.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMaxMessageBodySizeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMaxMessageBodySizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMaxMessageBodySizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNextAvailableNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNextAvailableNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNextAvailableNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNextAvailableNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNextAvailableNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNextAvailableNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureThresholdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSignatureThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSignatureThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenPairRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenPairRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenPairRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTokenPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTokenPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTokenPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pair.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenPairsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenPairsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenPairsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTokenPairsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTokenPairsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTokenPairsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenPairs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenPairs = append(m.TokenPairs, TokenPair{})
			if err := m.TokenPairs[len(m.TokenPairs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUsedNonceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUsedNonceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUsedNonceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceDomain", wireType)
			}
			m.SourceDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetUsedNonceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetUsedNonceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetUsedNonceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Nonce.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUsedNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUsedNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUsedNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllUsedNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllUsedNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllUsedNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UsedNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UsedNonces = append(m.UsedNonces, Nonce{})
			if err := m.UsedNonces[len(m.UsedNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemoteTokenMessengerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			m.DomainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemoteTokenMessengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteTokenMessenger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RemoteTokenMessenger.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemoteTokenMessengersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRemoteTokenMessengersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRemoteTokenMessengersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteTokenMessengers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteTokenMessengers = append(m.RemoteTokenMessengers, RemoteTokenMessenger{})
			if err := m.RemoteTokenMessengers[len(m.RemoteTokenMessengers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnMessageVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnMessageVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnMessageVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBurnMessageVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBurnMessageVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBurnMessageVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocalMessageVersionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocalMessageVersionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocalMessageVersionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocalMessageVersionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocalMessageVersionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocalMessageVersionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			m.Version = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Version |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocalDomainRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocalDomainRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocalDomainRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLocalDomainResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLocalDomainResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLocalDomainResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			m.DomainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
