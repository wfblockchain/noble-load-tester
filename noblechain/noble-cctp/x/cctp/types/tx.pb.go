// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: circle/cctp/v1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TODO add comments
type MsgUpdateOwner struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	NewOwner string `protobuf:"bytes,2,opt,name=new_owner,json=newOwner,proto3" json:"new_owner,omitempty"`
}

func (m *MsgUpdateOwner) Reset()         { *m = MsgUpdateOwner{} }
func (m *MsgUpdateOwner) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOwner) ProtoMessage()    {}
func (*MsgUpdateOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{0}
}
func (m *MsgUpdateOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOwner.Merge(m, src)
}
func (m *MsgUpdateOwner) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOwner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOwner proto.InternalMessageInfo

func (m *MsgUpdateOwner) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUpdateOwner) GetNewOwner() string {
	if m != nil {
		return m.NewOwner
	}
	return ""
}

type MsgUpdateOwnerResponse struct {
}

func (m *MsgUpdateOwnerResponse) Reset()         { *m = MsgUpdateOwnerResponse{} }
func (m *MsgUpdateOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateOwnerResponse) ProtoMessage()    {}
func (*MsgUpdateOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{1}
}
func (m *MsgUpdateOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateOwnerResponse.Merge(m, src)
}
func (m *MsgUpdateOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateOwnerResponse proto.InternalMessageInfo

type MsgUpdateAttesterManager struct {
	From               string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	NewAttesterManager string `protobuf:"bytes,2,opt,name=new_attester_manager,json=newAttesterManager,proto3" json:"new_attester_manager,omitempty"`
}

func (m *MsgUpdateAttesterManager) Reset()         { *m = MsgUpdateAttesterManager{} }
func (m *MsgUpdateAttesterManager) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAttesterManager) ProtoMessage()    {}
func (*MsgUpdateAttesterManager) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{2}
}
func (m *MsgUpdateAttesterManager) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAttesterManager) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAttesterManager.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAttesterManager) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAttesterManager.Merge(m, src)
}
func (m *MsgUpdateAttesterManager) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAttesterManager) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAttesterManager.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAttesterManager proto.InternalMessageInfo

func (m *MsgUpdateAttesterManager) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUpdateAttesterManager) GetNewAttesterManager() string {
	if m != nil {
		return m.NewAttesterManager
	}
	return ""
}

type MsgUpdateAttesterManagerResponse struct {
}

func (m *MsgUpdateAttesterManagerResponse) Reset()         { *m = MsgUpdateAttesterManagerResponse{} }
func (m *MsgUpdateAttesterManagerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateAttesterManagerResponse) ProtoMessage()    {}
func (*MsgUpdateAttesterManagerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{3}
}
func (m *MsgUpdateAttesterManagerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateAttesterManagerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateAttesterManagerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateAttesterManagerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateAttesterManagerResponse.Merge(m, src)
}
func (m *MsgUpdateAttesterManagerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateAttesterManagerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateAttesterManagerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateAttesterManagerResponse proto.InternalMessageInfo

type MsgUpdateTokenController struct {
	From               string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	NewTokenController string `protobuf:"bytes,2,opt,name=new_token_controller,json=newTokenController,proto3" json:"new_token_controller,omitempty"`
}

func (m *MsgUpdateTokenController) Reset()         { *m = MsgUpdateTokenController{} }
func (m *MsgUpdateTokenController) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTokenController) ProtoMessage()    {}
func (*MsgUpdateTokenController) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{4}
}
func (m *MsgUpdateTokenController) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTokenController) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTokenController.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTokenController) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTokenController.Merge(m, src)
}
func (m *MsgUpdateTokenController) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTokenController) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTokenController.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTokenController proto.InternalMessageInfo

func (m *MsgUpdateTokenController) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUpdateTokenController) GetNewTokenController() string {
	if m != nil {
		return m.NewTokenController
	}
	return ""
}

type MsgUpdateTokenControllerResponse struct {
}

func (m *MsgUpdateTokenControllerResponse) Reset()         { *m = MsgUpdateTokenControllerResponse{} }
func (m *MsgUpdateTokenControllerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateTokenControllerResponse) ProtoMessage()    {}
func (*MsgUpdateTokenControllerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{5}
}
func (m *MsgUpdateTokenControllerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateTokenControllerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateTokenControllerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateTokenControllerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateTokenControllerResponse.Merge(m, src)
}
func (m *MsgUpdateTokenControllerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateTokenControllerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateTokenControllerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateTokenControllerResponse proto.InternalMessageInfo

type MsgUpdatePauser struct {
	From      string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	NewPauser string `protobuf:"bytes,2,opt,name=new_pauser,json=newPauser,proto3" json:"new_pauser,omitempty"`
}

func (m *MsgUpdatePauser) Reset()         { *m = MsgUpdatePauser{} }
func (m *MsgUpdatePauser) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePauser) ProtoMessage()    {}
func (*MsgUpdatePauser) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{6}
}
func (m *MsgUpdatePauser) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePauser) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePauser.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePauser) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePauser.Merge(m, src)
}
func (m *MsgUpdatePauser) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePauser) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePauser.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePauser proto.InternalMessageInfo

func (m *MsgUpdatePauser) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUpdatePauser) GetNewPauser() string {
	if m != nil {
		return m.NewPauser
	}
	return ""
}

type MsgUpdatePauserResponse struct {
}

func (m *MsgUpdatePauserResponse) Reset()         { *m = MsgUpdatePauserResponse{} }
func (m *MsgUpdatePauserResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdatePauserResponse) ProtoMessage()    {}
func (*MsgUpdatePauserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{7}
}
func (m *MsgUpdatePauserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdatePauserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdatePauserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdatePauserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdatePauserResponse.Merge(m, src)
}
func (m *MsgUpdatePauserResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdatePauserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdatePauserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdatePauserResponse proto.InternalMessageInfo

type MsgAcceptOwner struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgAcceptOwner) Reset()         { *m = MsgAcceptOwner{} }
func (m *MsgAcceptOwner) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOwner) ProtoMessage()    {}
func (*MsgAcceptOwner) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{8}
}
func (m *MsgAcceptOwner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOwner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOwner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOwner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOwner.Merge(m, src)
}
func (m *MsgAcceptOwner) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOwner) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOwner.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOwner proto.InternalMessageInfo

func (m *MsgAcceptOwner) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type MsgAcceptOwnerResponse struct {
}

func (m *MsgAcceptOwnerResponse) Reset()         { *m = MsgAcceptOwnerResponse{} }
func (m *MsgAcceptOwnerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAcceptOwnerResponse) ProtoMessage()    {}
func (*MsgAcceptOwnerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{9}
}
func (m *MsgAcceptOwnerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAcceptOwnerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAcceptOwnerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAcceptOwnerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAcceptOwnerResponse.Merge(m, src)
}
func (m *MsgAcceptOwnerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAcceptOwnerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAcceptOwnerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAcceptOwnerResponse proto.InternalMessageInfo

type MsgEnableAttester struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Attester string `protobuf:"bytes,2,opt,name=attester,proto3" json:"attester,omitempty"`
}

func (m *MsgEnableAttester) Reset()         { *m = MsgEnableAttester{} }
func (m *MsgEnableAttester) String() string { return proto.CompactTextString(m) }
func (*MsgEnableAttester) ProtoMessage()    {}
func (*MsgEnableAttester) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{10}
}
func (m *MsgEnableAttester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnableAttester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnableAttester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnableAttester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnableAttester.Merge(m, src)
}
func (m *MsgEnableAttester) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnableAttester) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnableAttester.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnableAttester proto.InternalMessageInfo

func (m *MsgEnableAttester) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgEnableAttester) GetAttester() string {
	if m != nil {
		return m.Attester
	}
	return ""
}

type MsgEnableAttesterResponse struct {
}

func (m *MsgEnableAttesterResponse) Reset()         { *m = MsgEnableAttesterResponse{} }
func (m *MsgEnableAttesterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgEnableAttesterResponse) ProtoMessage()    {}
func (*MsgEnableAttesterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{11}
}
func (m *MsgEnableAttesterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgEnableAttesterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgEnableAttesterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgEnableAttesterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgEnableAttesterResponse.Merge(m, src)
}
func (m *MsgEnableAttesterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgEnableAttesterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgEnableAttesterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgEnableAttesterResponse proto.InternalMessageInfo

type MsgDisableAttester struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Attester string `protobuf:"bytes,2,opt,name=attester,proto3" json:"attester,omitempty"`
}

func (m *MsgDisableAttester) Reset()         { *m = MsgDisableAttester{} }
func (m *MsgDisableAttester) String() string { return proto.CompactTextString(m) }
func (*MsgDisableAttester) ProtoMessage()    {}
func (*MsgDisableAttester) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{12}
}
func (m *MsgDisableAttester) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableAttester) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableAttester.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableAttester) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableAttester.Merge(m, src)
}
func (m *MsgDisableAttester) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableAttester) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableAttester.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableAttester proto.InternalMessageInfo

func (m *MsgDisableAttester) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgDisableAttester) GetAttester() string {
	if m != nil {
		return m.Attester
	}
	return ""
}

type MsgDisableAttesterResponse struct {
}

func (m *MsgDisableAttesterResponse) Reset()         { *m = MsgDisableAttesterResponse{} }
func (m *MsgDisableAttesterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDisableAttesterResponse) ProtoMessage()    {}
func (*MsgDisableAttesterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{13}
}
func (m *MsgDisableAttesterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDisableAttesterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDisableAttesterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDisableAttesterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDisableAttesterResponse.Merge(m, src)
}
func (m *MsgDisableAttesterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDisableAttesterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDisableAttesterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDisableAttesterResponse proto.InternalMessageInfo

type MsgPauseBurningAndMinting struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgPauseBurningAndMinting) Reset()         { *m = MsgPauseBurningAndMinting{} }
func (m *MsgPauseBurningAndMinting) String() string { return proto.CompactTextString(m) }
func (*MsgPauseBurningAndMinting) ProtoMessage()    {}
func (*MsgPauseBurningAndMinting) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{14}
}
func (m *MsgPauseBurningAndMinting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseBurningAndMinting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseBurningAndMinting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseBurningAndMinting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseBurningAndMinting.Merge(m, src)
}
func (m *MsgPauseBurningAndMinting) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseBurningAndMinting) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseBurningAndMinting.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseBurningAndMinting proto.InternalMessageInfo

func (m *MsgPauseBurningAndMinting) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type MsgPauseBurningAndMintingResponse struct {
}

func (m *MsgPauseBurningAndMintingResponse) Reset()         { *m = MsgPauseBurningAndMintingResponse{} }
func (m *MsgPauseBurningAndMintingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgPauseBurningAndMintingResponse) ProtoMessage()    {}
func (*MsgPauseBurningAndMintingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{15}
}
func (m *MsgPauseBurningAndMintingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseBurningAndMintingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseBurningAndMintingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseBurningAndMintingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseBurningAndMintingResponse.Merge(m, src)
}
func (m *MsgPauseBurningAndMintingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseBurningAndMintingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseBurningAndMintingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseBurningAndMintingResponse proto.InternalMessageInfo

type MsgUnpauseBurningAndMinting struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgUnpauseBurningAndMinting) Reset()         { *m = MsgUnpauseBurningAndMinting{} }
func (m *MsgUnpauseBurningAndMinting) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseBurningAndMinting) ProtoMessage()    {}
func (*MsgUnpauseBurningAndMinting) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{16}
}
func (m *MsgUnpauseBurningAndMinting) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseBurningAndMinting) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseBurningAndMinting.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseBurningAndMinting) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseBurningAndMinting.Merge(m, src)
}
func (m *MsgUnpauseBurningAndMinting) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseBurningAndMinting) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseBurningAndMinting.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseBurningAndMinting proto.InternalMessageInfo

func (m *MsgUnpauseBurningAndMinting) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type MsgUnpauseBurningAndMintingResponse struct {
}

func (m *MsgUnpauseBurningAndMintingResponse) Reset()         { *m = MsgUnpauseBurningAndMintingResponse{} }
func (m *MsgUnpauseBurningAndMintingResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseBurningAndMintingResponse) ProtoMessage()    {}
func (*MsgUnpauseBurningAndMintingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{17}
}
func (m *MsgUnpauseBurningAndMintingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseBurningAndMintingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseBurningAndMintingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseBurningAndMintingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseBurningAndMintingResponse.Merge(m, src)
}
func (m *MsgUnpauseBurningAndMintingResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseBurningAndMintingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseBurningAndMintingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseBurningAndMintingResponse proto.InternalMessageInfo

type MsgPauseSendingAndReceivingMessages struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgPauseSendingAndReceivingMessages) Reset()         { *m = MsgPauseSendingAndReceivingMessages{} }
func (m *MsgPauseSendingAndReceivingMessages) String() string { return proto.CompactTextString(m) }
func (*MsgPauseSendingAndReceivingMessages) ProtoMessage()    {}
func (*MsgPauseSendingAndReceivingMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{18}
}
func (m *MsgPauseSendingAndReceivingMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseSendingAndReceivingMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseSendingAndReceivingMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseSendingAndReceivingMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseSendingAndReceivingMessages.Merge(m, src)
}
func (m *MsgPauseSendingAndReceivingMessages) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseSendingAndReceivingMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseSendingAndReceivingMessages.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseSendingAndReceivingMessages proto.InternalMessageInfo

func (m *MsgPauseSendingAndReceivingMessages) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type MsgPauseSendingAndReceivingMessagesResponse struct {
}

func (m *MsgPauseSendingAndReceivingMessagesResponse) Reset() {
	*m = MsgPauseSendingAndReceivingMessagesResponse{}
}
func (m *MsgPauseSendingAndReceivingMessagesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgPauseSendingAndReceivingMessagesResponse) ProtoMessage() {}
func (*MsgPauseSendingAndReceivingMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{19}
}
func (m *MsgPauseSendingAndReceivingMessagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgPauseSendingAndReceivingMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgPauseSendingAndReceivingMessagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgPauseSendingAndReceivingMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgPauseSendingAndReceivingMessagesResponse.Merge(m, src)
}
func (m *MsgPauseSendingAndReceivingMessagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgPauseSendingAndReceivingMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgPauseSendingAndReceivingMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgPauseSendingAndReceivingMessagesResponse proto.InternalMessageInfo

type MsgUnpauseSendingAndReceivingMessages struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgUnpauseSendingAndReceivingMessages) Reset()         { *m = MsgUnpauseSendingAndReceivingMessages{} }
func (m *MsgUnpauseSendingAndReceivingMessages) String() string { return proto.CompactTextString(m) }
func (*MsgUnpauseSendingAndReceivingMessages) ProtoMessage()    {}
func (*MsgUnpauseSendingAndReceivingMessages) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{20}
}
func (m *MsgUnpauseSendingAndReceivingMessages) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseSendingAndReceivingMessages) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseSendingAndReceivingMessages.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseSendingAndReceivingMessages) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseSendingAndReceivingMessages.Merge(m, src)
}
func (m *MsgUnpauseSendingAndReceivingMessages) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseSendingAndReceivingMessages) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseSendingAndReceivingMessages.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseSendingAndReceivingMessages proto.InternalMessageInfo

func (m *MsgUnpauseSendingAndReceivingMessages) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type MsgUnpauseSendingAndReceivingMessagesResponse struct {
}

func (m *MsgUnpauseSendingAndReceivingMessagesResponse) Reset() {
	*m = MsgUnpauseSendingAndReceivingMessagesResponse{}
}
func (m *MsgUnpauseSendingAndReceivingMessagesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*MsgUnpauseSendingAndReceivingMessagesResponse) ProtoMessage() {}
func (*MsgUnpauseSendingAndReceivingMessagesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{21}
}
func (m *MsgUnpauseSendingAndReceivingMessagesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnpauseSendingAndReceivingMessagesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnpauseSendingAndReceivingMessagesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnpauseSendingAndReceivingMessagesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnpauseSendingAndReceivingMessagesResponse.Merge(m, src)
}
func (m *MsgUnpauseSendingAndReceivingMessagesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnpauseSendingAndReceivingMessagesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnpauseSendingAndReceivingMessagesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnpauseSendingAndReceivingMessagesResponse proto.InternalMessageInfo

type MsgUpdateMaxMessageBodySize struct {
	From        string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	MessageSize uint64 `protobuf:"varint,2,opt,name=message_size,json=messageSize,proto3" json:"message_size,omitempty"`
}

func (m *MsgUpdateMaxMessageBodySize) Reset()         { *m = MsgUpdateMaxMessageBodySize{} }
func (m *MsgUpdateMaxMessageBodySize) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaxMessageBodySize) ProtoMessage()    {}
func (*MsgUpdateMaxMessageBodySize) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{22}
}
func (m *MsgUpdateMaxMessageBodySize) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaxMessageBodySize) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaxMessageBodySize.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaxMessageBodySize) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaxMessageBodySize.Merge(m, src)
}
func (m *MsgUpdateMaxMessageBodySize) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaxMessageBodySize) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaxMessageBodySize.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaxMessageBodySize proto.InternalMessageInfo

func (m *MsgUpdateMaxMessageBodySize) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUpdateMaxMessageBodySize) GetMessageSize() uint64 {
	if m != nil {
		return m.MessageSize
	}
	return 0
}

type MsgUpdateMaxMessageBodySizeResponse struct {
}

func (m *MsgUpdateMaxMessageBodySizeResponse) Reset()         { *m = MsgUpdateMaxMessageBodySizeResponse{} }
func (m *MsgUpdateMaxMessageBodySizeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateMaxMessageBodySizeResponse) ProtoMessage()    {}
func (*MsgUpdateMaxMessageBodySizeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{23}
}
func (m *MsgUpdateMaxMessageBodySizeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateMaxMessageBodySizeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateMaxMessageBodySizeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateMaxMessageBodySizeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateMaxMessageBodySizeResponse.Merge(m, src)
}
func (m *MsgUpdateMaxMessageBodySizeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateMaxMessageBodySizeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateMaxMessageBodySizeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateMaxMessageBodySizeResponse proto.InternalMessageInfo

type MsgSetMaxBurnAmountPerMessage struct {
	From       string                `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	LocalToken string                `protobuf:"bytes,2,opt,name=local_token,json=localToken,proto3" json:"local_token,omitempty"`
	Amount     cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
}

func (m *MsgSetMaxBurnAmountPerMessage) Reset()         { *m = MsgSetMaxBurnAmountPerMessage{} }
func (m *MsgSetMaxBurnAmountPerMessage) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxBurnAmountPerMessage) ProtoMessage()    {}
func (*MsgSetMaxBurnAmountPerMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{24}
}
func (m *MsgSetMaxBurnAmountPerMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxBurnAmountPerMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxBurnAmountPerMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxBurnAmountPerMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxBurnAmountPerMessage.Merge(m, src)
}
func (m *MsgSetMaxBurnAmountPerMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxBurnAmountPerMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxBurnAmountPerMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxBurnAmountPerMessage proto.InternalMessageInfo

func (m *MsgSetMaxBurnAmountPerMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgSetMaxBurnAmountPerMessage) GetLocalToken() string {
	if m != nil {
		return m.LocalToken
	}
	return ""
}

type MsgSetMaxBurnAmountPerMessageResponse struct {
}

func (m *MsgSetMaxBurnAmountPerMessageResponse) Reset()         { *m = MsgSetMaxBurnAmountPerMessageResponse{} }
func (m *MsgSetMaxBurnAmountPerMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxBurnAmountPerMessageResponse) ProtoMessage()    {}
func (*MsgSetMaxBurnAmountPerMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{25}
}
func (m *MsgSetMaxBurnAmountPerMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxBurnAmountPerMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxBurnAmountPerMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxBurnAmountPerMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxBurnAmountPerMessageResponse.Merge(m, src)
}
func (m *MsgSetMaxBurnAmountPerMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxBurnAmountPerMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxBurnAmountPerMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxBurnAmountPerMessageResponse proto.InternalMessageInfo

type MsgDepositForBurn struct {
	From              string                `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Amount            cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	DestinationDomain uint32                `protobuf:"varint,3,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	MintRecipient     []byte                `protobuf:"bytes,4,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	BurnToken         string                `protobuf:"bytes,5,opt,name=burn_token,json=burnToken,proto3" json:"burn_token,omitempty"`
}

func (m *MsgDepositForBurn) Reset()         { *m = MsgDepositForBurn{} }
func (m *MsgDepositForBurn) String() string { return proto.CompactTextString(m) }
func (*MsgDepositForBurn) ProtoMessage()    {}
func (*MsgDepositForBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{26}
}
func (m *MsgDepositForBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositForBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositForBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositForBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositForBurn.Merge(m, src)
}
func (m *MsgDepositForBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositForBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositForBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositForBurn proto.InternalMessageInfo

func (m *MsgDepositForBurn) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgDepositForBurn) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *MsgDepositForBurn) GetMintRecipient() []byte {
	if m != nil {
		return m.MintRecipient
	}
	return nil
}

func (m *MsgDepositForBurn) GetBurnToken() string {
	if m != nil {
		return m.BurnToken
	}
	return ""
}

type MsgDepositForBurnResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgDepositForBurnResponse) Reset()         { *m = MsgDepositForBurnResponse{} }
func (m *MsgDepositForBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositForBurnResponse) ProtoMessage()    {}
func (*MsgDepositForBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{27}
}
func (m *MsgDepositForBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositForBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositForBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositForBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositForBurnResponse.Merge(m, src)
}
func (m *MsgDepositForBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositForBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositForBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositForBurnResponse proto.InternalMessageInfo

func (m *MsgDepositForBurnResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgDepositForBurnWithCaller struct {
	From              string                `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Amount            cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount"`
	DestinationDomain uint32                `protobuf:"varint,3,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	MintRecipient     []byte                `protobuf:"bytes,4,opt,name=mint_recipient,json=mintRecipient,proto3" json:"mint_recipient,omitempty"`
	BurnToken         string                `protobuf:"bytes,5,opt,name=burn_token,json=burnToken,proto3" json:"burn_token,omitempty"`
	DestinationCaller []byte                `protobuf:"bytes,6,opt,name=destination_caller,json=destinationCaller,proto3" json:"destination_caller,omitempty"`
}

func (m *MsgDepositForBurnWithCaller) Reset()         { *m = MsgDepositForBurnWithCaller{} }
func (m *MsgDepositForBurnWithCaller) String() string { return proto.CompactTextString(m) }
func (*MsgDepositForBurnWithCaller) ProtoMessage()    {}
func (*MsgDepositForBurnWithCaller) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{28}
}
func (m *MsgDepositForBurnWithCaller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositForBurnWithCaller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositForBurnWithCaller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositForBurnWithCaller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositForBurnWithCaller.Merge(m, src)
}
func (m *MsgDepositForBurnWithCaller) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositForBurnWithCaller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositForBurnWithCaller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositForBurnWithCaller proto.InternalMessageInfo

func (m *MsgDepositForBurnWithCaller) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgDepositForBurnWithCaller) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *MsgDepositForBurnWithCaller) GetMintRecipient() []byte {
	if m != nil {
		return m.MintRecipient
	}
	return nil
}

func (m *MsgDepositForBurnWithCaller) GetBurnToken() string {
	if m != nil {
		return m.BurnToken
	}
	return ""
}

func (m *MsgDepositForBurnWithCaller) GetDestinationCaller() []byte {
	if m != nil {
		return m.DestinationCaller
	}
	return nil
}

type MsgDepositForBurnWithCallerResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgDepositForBurnWithCallerResponse) Reset()         { *m = MsgDepositForBurnWithCallerResponse{} }
func (m *MsgDepositForBurnWithCallerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDepositForBurnWithCallerResponse) ProtoMessage()    {}
func (*MsgDepositForBurnWithCallerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{29}
}
func (m *MsgDepositForBurnWithCallerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDepositForBurnWithCallerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDepositForBurnWithCallerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDepositForBurnWithCallerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDepositForBurnWithCallerResponse.Merge(m, src)
}
func (m *MsgDepositForBurnWithCallerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDepositForBurnWithCallerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDepositForBurnWithCallerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDepositForBurnWithCallerResponse proto.InternalMessageInfo

func (m *MsgDepositForBurnWithCallerResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgReplaceDepositForBurn struct {
	From                 string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	OriginalMessage      []byte `protobuf:"bytes,2,opt,name=original_message,json=originalMessage,proto3" json:"original_message,omitempty"`
	OriginalAttestation  []byte `protobuf:"bytes,3,opt,name=original_attestation,json=originalAttestation,proto3" json:"original_attestation,omitempty"`
	NewDestinationCaller []byte `protobuf:"bytes,4,opt,name=new_destination_caller,json=newDestinationCaller,proto3" json:"new_destination_caller,omitempty"`
	NewMintRecipient     []byte `protobuf:"bytes,5,opt,name=new_mint_recipient,json=newMintRecipient,proto3" json:"new_mint_recipient,omitempty"`
}

func (m *MsgReplaceDepositForBurn) Reset()         { *m = MsgReplaceDepositForBurn{} }
func (m *MsgReplaceDepositForBurn) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceDepositForBurn) ProtoMessage()    {}
func (*MsgReplaceDepositForBurn) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{30}
}
func (m *MsgReplaceDepositForBurn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceDepositForBurn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceDepositForBurn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceDepositForBurn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceDepositForBurn.Merge(m, src)
}
func (m *MsgReplaceDepositForBurn) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceDepositForBurn) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceDepositForBurn.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceDepositForBurn proto.InternalMessageInfo

func (m *MsgReplaceDepositForBurn) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgReplaceDepositForBurn) GetOriginalMessage() []byte {
	if m != nil {
		return m.OriginalMessage
	}
	return nil
}

func (m *MsgReplaceDepositForBurn) GetOriginalAttestation() []byte {
	if m != nil {
		return m.OriginalAttestation
	}
	return nil
}

func (m *MsgReplaceDepositForBurn) GetNewDestinationCaller() []byte {
	if m != nil {
		return m.NewDestinationCaller
	}
	return nil
}

func (m *MsgReplaceDepositForBurn) GetNewMintRecipient() []byte {
	if m != nil {
		return m.NewMintRecipient
	}
	return nil
}

type MsgReplaceDepositForBurnResponse struct {
}

func (m *MsgReplaceDepositForBurnResponse) Reset()         { *m = MsgReplaceDepositForBurnResponse{} }
func (m *MsgReplaceDepositForBurnResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceDepositForBurnResponse) ProtoMessage()    {}
func (*MsgReplaceDepositForBurnResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{31}
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceDepositForBurnResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceDepositForBurnResponse.Merge(m, src)
}
func (m *MsgReplaceDepositForBurnResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceDepositForBurnResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceDepositForBurnResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceDepositForBurnResponse proto.InternalMessageInfo

type MsgReceiveMessage struct {
	From        string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Message     []byte `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Attestation []byte `protobuf:"bytes,3,opt,name=attestation,proto3" json:"attestation,omitempty"`
}

func (m *MsgReceiveMessage) Reset()         { *m = MsgReceiveMessage{} }
func (m *MsgReceiveMessage) String() string { return proto.CompactTextString(m) }
func (*MsgReceiveMessage) ProtoMessage()    {}
func (*MsgReceiveMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{32}
}
func (m *MsgReceiveMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiveMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiveMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiveMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiveMessage.Merge(m, src)
}
func (m *MsgReceiveMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiveMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiveMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiveMessage proto.InternalMessageInfo

func (m *MsgReceiveMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgReceiveMessage) GetMessage() []byte {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *MsgReceiveMessage) GetAttestation() []byte {
	if m != nil {
		return m.Attestation
	}
	return nil
}

type MsgReceiveMessageResponse struct {
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (m *MsgReceiveMessageResponse) Reset()         { *m = MsgReceiveMessageResponse{} }
func (m *MsgReceiveMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReceiveMessageResponse) ProtoMessage()    {}
func (*MsgReceiveMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{33}
}
func (m *MsgReceiveMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiveMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiveMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiveMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiveMessageResponse.Merge(m, src)
}
func (m *MsgReceiveMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiveMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiveMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiveMessageResponse proto.InternalMessageInfo

func (m *MsgReceiveMessageResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type MsgSendMessage struct {
	From              string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	DestinationDomain uint32 `protobuf:"varint,2,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	Recipient         []byte `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	MessageBody       []byte `protobuf:"bytes,4,opt,name=message_body,json=messageBody,proto3" json:"message_body,omitempty"`
}

func (m *MsgSendMessage) Reset()         { *m = MsgSendMessage{} }
func (m *MsgSendMessage) String() string { return proto.CompactTextString(m) }
func (*MsgSendMessage) ProtoMessage()    {}
func (*MsgSendMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{34}
}
func (m *MsgSendMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMessage.Merge(m, src)
}
func (m *MsgSendMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMessage proto.InternalMessageInfo

func (m *MsgSendMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgSendMessage) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *MsgSendMessage) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *MsgSendMessage) GetMessageBody() []byte {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

type MsgSendMessageResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgSendMessageResponse) Reset()         { *m = MsgSendMessageResponse{} }
func (m *MsgSendMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendMessageResponse) ProtoMessage()    {}
func (*MsgSendMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{35}
}
func (m *MsgSendMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMessageResponse.Merge(m, src)
}
func (m *MsgSendMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMessageResponse proto.InternalMessageInfo

func (m *MsgSendMessageResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgSendMessageWithCaller struct {
	From              string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	DestinationDomain uint32 `protobuf:"varint,2,opt,name=destination_domain,json=destinationDomain,proto3" json:"destination_domain,omitempty"`
	Recipient         []byte `protobuf:"bytes,3,opt,name=recipient,proto3" json:"recipient,omitempty"`
	MessageBody       []byte `protobuf:"bytes,4,opt,name=message_body,json=messageBody,proto3" json:"message_body,omitempty"`
	DestinationCaller []byte `protobuf:"bytes,5,opt,name=destination_caller,json=destinationCaller,proto3" json:"destination_caller,omitempty"`
}

func (m *MsgSendMessageWithCaller) Reset()         { *m = MsgSendMessageWithCaller{} }
func (m *MsgSendMessageWithCaller) String() string { return proto.CompactTextString(m) }
func (*MsgSendMessageWithCaller) ProtoMessage()    {}
func (*MsgSendMessageWithCaller) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{36}
}
func (m *MsgSendMessageWithCaller) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMessageWithCaller) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMessageWithCaller.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMessageWithCaller) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMessageWithCaller.Merge(m, src)
}
func (m *MsgSendMessageWithCaller) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMessageWithCaller) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMessageWithCaller.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMessageWithCaller proto.InternalMessageInfo

func (m *MsgSendMessageWithCaller) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgSendMessageWithCaller) GetDestinationDomain() uint32 {
	if m != nil {
		return m.DestinationDomain
	}
	return 0
}

func (m *MsgSendMessageWithCaller) GetRecipient() []byte {
	if m != nil {
		return m.Recipient
	}
	return nil
}

func (m *MsgSendMessageWithCaller) GetMessageBody() []byte {
	if m != nil {
		return m.MessageBody
	}
	return nil
}

func (m *MsgSendMessageWithCaller) GetDestinationCaller() []byte {
	if m != nil {
		return m.DestinationCaller
	}
	return nil
}

type MsgSendMessageWithCallerResponse struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgSendMessageWithCallerResponse) Reset()         { *m = MsgSendMessageWithCallerResponse{} }
func (m *MsgSendMessageWithCallerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendMessageWithCallerResponse) ProtoMessage()    {}
func (*MsgSendMessageWithCallerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{37}
}
func (m *MsgSendMessageWithCallerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendMessageWithCallerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendMessageWithCallerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendMessageWithCallerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendMessageWithCallerResponse.Merge(m, src)
}
func (m *MsgSendMessageWithCallerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendMessageWithCallerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendMessageWithCallerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendMessageWithCallerResponse proto.InternalMessageInfo

func (m *MsgSendMessageWithCallerResponse) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgReplaceMessage struct {
	From                 string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	OriginalMessage      []byte `protobuf:"bytes,2,opt,name=original_message,json=originalMessage,proto3" json:"original_message,omitempty"`
	OriginalAttestation  []byte `protobuf:"bytes,3,opt,name=original_attestation,json=originalAttestation,proto3" json:"original_attestation,omitempty"`
	NewMessageBody       []byte `protobuf:"bytes,4,opt,name=new_message_body,json=newMessageBody,proto3" json:"new_message_body,omitempty"`
	NewDestinationCaller []byte `protobuf:"bytes,5,opt,name=new_destination_caller,json=newDestinationCaller,proto3" json:"new_destination_caller,omitempty"`
}

func (m *MsgReplaceMessage) Reset()         { *m = MsgReplaceMessage{} }
func (m *MsgReplaceMessage) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceMessage) ProtoMessage()    {}
func (*MsgReplaceMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{38}
}
func (m *MsgReplaceMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceMessage.Merge(m, src)
}
func (m *MsgReplaceMessage) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceMessage.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceMessage proto.InternalMessageInfo

func (m *MsgReplaceMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgReplaceMessage) GetOriginalMessage() []byte {
	if m != nil {
		return m.OriginalMessage
	}
	return nil
}

func (m *MsgReplaceMessage) GetOriginalAttestation() []byte {
	if m != nil {
		return m.OriginalAttestation
	}
	return nil
}

func (m *MsgReplaceMessage) GetNewMessageBody() []byte {
	if m != nil {
		return m.NewMessageBody
	}
	return nil
}

func (m *MsgReplaceMessage) GetNewDestinationCaller() []byte {
	if m != nil {
		return m.NewDestinationCaller
	}
	return nil
}

type MsgReplaceMessageResponse struct {
}

func (m *MsgReplaceMessageResponse) Reset()         { *m = MsgReplaceMessageResponse{} }
func (m *MsgReplaceMessageResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReplaceMessageResponse) ProtoMessage()    {}
func (*MsgReplaceMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{39}
}
func (m *MsgReplaceMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReplaceMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReplaceMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReplaceMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReplaceMessageResponse.Merge(m, src)
}
func (m *MsgReplaceMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReplaceMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReplaceMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReplaceMessageResponse proto.InternalMessageInfo

type MsgUpdateSignatureThreshold struct {
	From   string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Amount uint32 `protobuf:"varint,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *MsgUpdateSignatureThreshold) Reset()         { *m = MsgUpdateSignatureThreshold{} }
func (m *MsgUpdateSignatureThreshold) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSignatureThreshold) ProtoMessage()    {}
func (*MsgUpdateSignatureThreshold) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{40}
}
func (m *MsgUpdateSignatureThreshold) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSignatureThreshold) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSignatureThreshold.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSignatureThreshold) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSignatureThreshold.Merge(m, src)
}
func (m *MsgUpdateSignatureThreshold) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSignatureThreshold) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSignatureThreshold.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSignatureThreshold proto.InternalMessageInfo

func (m *MsgUpdateSignatureThreshold) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUpdateSignatureThreshold) GetAmount() uint32 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type MsgUpdateSignatureThresholdResponse struct {
}

func (m *MsgUpdateSignatureThresholdResponse) Reset()         { *m = MsgUpdateSignatureThresholdResponse{} }
func (m *MsgUpdateSignatureThresholdResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateSignatureThresholdResponse) ProtoMessage()    {}
func (*MsgUpdateSignatureThresholdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{41}
}
func (m *MsgUpdateSignatureThresholdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateSignatureThresholdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateSignatureThresholdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateSignatureThresholdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateSignatureThresholdResponse.Merge(m, src)
}
func (m *MsgUpdateSignatureThresholdResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateSignatureThresholdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateSignatureThresholdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateSignatureThresholdResponse proto.InternalMessageInfo

type MsgLinkTokenPair struct {
	From         string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	RemoteDomain uint32 `protobuf:"varint,2,opt,name=remote_domain,json=remoteDomain,proto3" json:"remote_domain,omitempty"`
	RemoteToken  []byte `protobuf:"bytes,3,opt,name=remote_token,json=remoteToken,proto3" json:"remote_token,omitempty"`
	LocalToken   string `protobuf:"bytes,4,opt,name=local_token,json=localToken,proto3" json:"local_token,omitempty"`
}

func (m *MsgLinkTokenPair) Reset()         { *m = MsgLinkTokenPair{} }
func (m *MsgLinkTokenPair) String() string { return proto.CompactTextString(m) }
func (*MsgLinkTokenPair) ProtoMessage()    {}
func (*MsgLinkTokenPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{42}
}
func (m *MsgLinkTokenPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLinkTokenPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLinkTokenPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLinkTokenPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLinkTokenPair.Merge(m, src)
}
func (m *MsgLinkTokenPair) XXX_Size() int {
	return m.Size()
}
func (m *MsgLinkTokenPair) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLinkTokenPair.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLinkTokenPair proto.InternalMessageInfo

func (m *MsgLinkTokenPair) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgLinkTokenPair) GetRemoteDomain() uint32 {
	if m != nil {
		return m.RemoteDomain
	}
	return 0
}

func (m *MsgLinkTokenPair) GetRemoteToken() []byte {
	if m != nil {
		return m.RemoteToken
	}
	return nil
}

func (m *MsgLinkTokenPair) GetLocalToken() string {
	if m != nil {
		return m.LocalToken
	}
	return ""
}

type MsgLinkTokenPairResponse struct {
}

func (m *MsgLinkTokenPairResponse) Reset()         { *m = MsgLinkTokenPairResponse{} }
func (m *MsgLinkTokenPairResponse) String() string { return proto.CompactTextString(m) }
func (*MsgLinkTokenPairResponse) ProtoMessage()    {}
func (*MsgLinkTokenPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{43}
}
func (m *MsgLinkTokenPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgLinkTokenPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgLinkTokenPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgLinkTokenPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgLinkTokenPairResponse.Merge(m, src)
}
func (m *MsgLinkTokenPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgLinkTokenPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgLinkTokenPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgLinkTokenPairResponse proto.InternalMessageInfo

type MsgUnlinkTokenPair struct {
	From         string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	RemoteDomain uint32 `protobuf:"varint,2,opt,name=remote_domain,json=remoteDomain,proto3" json:"remote_domain,omitempty"`
	RemoteToken  []byte `protobuf:"bytes,3,opt,name=remote_token,json=remoteToken,proto3" json:"remote_token,omitempty"`
	LocalToken   string `protobuf:"bytes,4,opt,name=local_token,json=localToken,proto3" json:"local_token,omitempty"`
}

func (m *MsgUnlinkTokenPair) Reset()         { *m = MsgUnlinkTokenPair{} }
func (m *MsgUnlinkTokenPair) String() string { return proto.CompactTextString(m) }
func (*MsgUnlinkTokenPair) ProtoMessage()    {}
func (*MsgUnlinkTokenPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{44}
}
func (m *MsgUnlinkTokenPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlinkTokenPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlinkTokenPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlinkTokenPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlinkTokenPair.Merge(m, src)
}
func (m *MsgUnlinkTokenPair) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlinkTokenPair) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlinkTokenPair.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlinkTokenPair proto.InternalMessageInfo

func (m *MsgUnlinkTokenPair) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgUnlinkTokenPair) GetRemoteDomain() uint32 {
	if m != nil {
		return m.RemoteDomain
	}
	return 0
}

func (m *MsgUnlinkTokenPair) GetRemoteToken() []byte {
	if m != nil {
		return m.RemoteToken
	}
	return nil
}

func (m *MsgUnlinkTokenPair) GetLocalToken() string {
	if m != nil {
		return m.LocalToken
	}
	return ""
}

type MsgUnlinkTokenPairResponse struct {
}

func (m *MsgUnlinkTokenPairResponse) Reset()         { *m = MsgUnlinkTokenPairResponse{} }
func (m *MsgUnlinkTokenPairResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnlinkTokenPairResponse) ProtoMessage()    {}
func (*MsgUnlinkTokenPairResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{45}
}
func (m *MsgUnlinkTokenPairResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnlinkTokenPairResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnlinkTokenPairResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnlinkTokenPairResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnlinkTokenPairResponse.Merge(m, src)
}
func (m *MsgUnlinkTokenPairResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnlinkTokenPairResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnlinkTokenPairResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnlinkTokenPairResponse proto.InternalMessageInfo

type MsgAddRemoteTokenMessenger struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	DomainId uint32 `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
	Address  []byte `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *MsgAddRemoteTokenMessenger) Reset()         { *m = MsgAddRemoteTokenMessenger{} }
func (m *MsgAddRemoteTokenMessenger) String() string { return proto.CompactTextString(m) }
func (*MsgAddRemoteTokenMessenger) ProtoMessage()    {}
func (*MsgAddRemoteTokenMessenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{46}
}
func (m *MsgAddRemoteTokenMessenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRemoteTokenMessenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRemoteTokenMessenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRemoteTokenMessenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRemoteTokenMessenger.Merge(m, src)
}
func (m *MsgAddRemoteTokenMessenger) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRemoteTokenMessenger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRemoteTokenMessenger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRemoteTokenMessenger proto.InternalMessageInfo

func (m *MsgAddRemoteTokenMessenger) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgAddRemoteTokenMessenger) GetDomainId() uint32 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

func (m *MsgAddRemoteTokenMessenger) GetAddress() []byte {
	if m != nil {
		return m.Address
	}
	return nil
}

type MsgAddRemoteTokenMessengerResponse struct {
}

func (m *MsgAddRemoteTokenMessengerResponse) Reset()         { *m = MsgAddRemoteTokenMessengerResponse{} }
func (m *MsgAddRemoteTokenMessengerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddRemoteTokenMessengerResponse) ProtoMessage()    {}
func (*MsgAddRemoteTokenMessengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{47}
}
func (m *MsgAddRemoteTokenMessengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddRemoteTokenMessengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddRemoteTokenMessengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddRemoteTokenMessengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddRemoteTokenMessengerResponse.Merge(m, src)
}
func (m *MsgAddRemoteTokenMessengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddRemoteTokenMessengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddRemoteTokenMessengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddRemoteTokenMessengerResponse proto.InternalMessageInfo

type MsgRemoveRemoteTokenMessenger struct {
	From     string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	DomainId uint32 `protobuf:"varint,2,opt,name=domain_id,json=domainId,proto3" json:"domain_id,omitempty"`
}

func (m *MsgRemoveRemoteTokenMessenger) Reset()         { *m = MsgRemoveRemoteTokenMessenger{} }
func (m *MsgRemoveRemoteTokenMessenger) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveRemoteTokenMessenger) ProtoMessage()    {}
func (*MsgRemoveRemoteTokenMessenger) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{48}
}
func (m *MsgRemoveRemoteTokenMessenger) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveRemoteTokenMessenger) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveRemoteTokenMessenger.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveRemoteTokenMessenger) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveRemoteTokenMessenger.Merge(m, src)
}
func (m *MsgRemoveRemoteTokenMessenger) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveRemoteTokenMessenger) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveRemoteTokenMessenger.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveRemoteTokenMessenger proto.InternalMessageInfo

func (m *MsgRemoveRemoteTokenMessenger) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgRemoveRemoteTokenMessenger) GetDomainId() uint32 {
	if m != nil {
		return m.DomainId
	}
	return 0
}

type MsgRemoveRemoteTokenMessengerResponse struct {
}

func (m *MsgRemoveRemoteTokenMessengerResponse) Reset()         { *m = MsgRemoveRemoteTokenMessengerResponse{} }
func (m *MsgRemoveRemoteTokenMessengerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveRemoteTokenMessengerResponse) ProtoMessage()    {}
func (*MsgRemoveRemoteTokenMessengerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b990d866e8d1445, []int{49}
}
func (m *MsgRemoveRemoteTokenMessengerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveRemoteTokenMessengerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveRemoteTokenMessengerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveRemoteTokenMessengerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveRemoteTokenMessengerResponse.Merge(m, src)
}
func (m *MsgRemoveRemoteTokenMessengerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveRemoteTokenMessengerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveRemoteTokenMessengerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveRemoteTokenMessengerResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateOwner)(nil), "circle.cctp.v1.MsgUpdateOwner")
	proto.RegisterType((*MsgUpdateOwnerResponse)(nil), "circle.cctp.v1.MsgUpdateOwnerResponse")
	proto.RegisterType((*MsgUpdateAttesterManager)(nil), "circle.cctp.v1.MsgUpdateAttesterManager")
	proto.RegisterType((*MsgUpdateAttesterManagerResponse)(nil), "circle.cctp.v1.MsgUpdateAttesterManagerResponse")
	proto.RegisterType((*MsgUpdateTokenController)(nil), "circle.cctp.v1.MsgUpdateTokenController")
	proto.RegisterType((*MsgUpdateTokenControllerResponse)(nil), "circle.cctp.v1.MsgUpdateTokenControllerResponse")
	proto.RegisterType((*MsgUpdatePauser)(nil), "circle.cctp.v1.MsgUpdatePauser")
	proto.RegisterType((*MsgUpdatePauserResponse)(nil), "circle.cctp.v1.MsgUpdatePauserResponse")
	proto.RegisterType((*MsgAcceptOwner)(nil), "circle.cctp.v1.MsgAcceptOwner")
	proto.RegisterType((*MsgAcceptOwnerResponse)(nil), "circle.cctp.v1.MsgAcceptOwnerResponse")
	proto.RegisterType((*MsgEnableAttester)(nil), "circle.cctp.v1.MsgEnableAttester")
	proto.RegisterType((*MsgEnableAttesterResponse)(nil), "circle.cctp.v1.MsgEnableAttesterResponse")
	proto.RegisterType((*MsgDisableAttester)(nil), "circle.cctp.v1.MsgDisableAttester")
	proto.RegisterType((*MsgDisableAttesterResponse)(nil), "circle.cctp.v1.MsgDisableAttesterResponse")
	proto.RegisterType((*MsgPauseBurningAndMinting)(nil), "circle.cctp.v1.MsgPauseBurningAndMinting")
	proto.RegisterType((*MsgPauseBurningAndMintingResponse)(nil), "circle.cctp.v1.MsgPauseBurningAndMintingResponse")
	proto.RegisterType((*MsgUnpauseBurningAndMinting)(nil), "circle.cctp.v1.MsgUnpauseBurningAndMinting")
	proto.RegisterType((*MsgUnpauseBurningAndMintingResponse)(nil), "circle.cctp.v1.MsgUnpauseBurningAndMintingResponse")
	proto.RegisterType((*MsgPauseSendingAndReceivingMessages)(nil), "circle.cctp.v1.MsgPauseSendingAndReceivingMessages")
	proto.RegisterType((*MsgPauseSendingAndReceivingMessagesResponse)(nil), "circle.cctp.v1.MsgPauseSendingAndReceivingMessagesResponse")
	proto.RegisterType((*MsgUnpauseSendingAndReceivingMessages)(nil), "circle.cctp.v1.MsgUnpauseSendingAndReceivingMessages")
	proto.RegisterType((*MsgUnpauseSendingAndReceivingMessagesResponse)(nil), "circle.cctp.v1.MsgUnpauseSendingAndReceivingMessagesResponse")
	proto.RegisterType((*MsgUpdateMaxMessageBodySize)(nil), "circle.cctp.v1.MsgUpdateMaxMessageBodySize")
	proto.RegisterType((*MsgUpdateMaxMessageBodySizeResponse)(nil), "circle.cctp.v1.MsgUpdateMaxMessageBodySizeResponse")
	proto.RegisterType((*MsgSetMaxBurnAmountPerMessage)(nil), "circle.cctp.v1.MsgSetMaxBurnAmountPerMessage")
	proto.RegisterType((*MsgSetMaxBurnAmountPerMessageResponse)(nil), "circle.cctp.v1.MsgSetMaxBurnAmountPerMessageResponse")
	proto.RegisterType((*MsgDepositForBurn)(nil), "circle.cctp.v1.MsgDepositForBurn")
	proto.RegisterType((*MsgDepositForBurnResponse)(nil), "circle.cctp.v1.MsgDepositForBurnResponse")
	proto.RegisterType((*MsgDepositForBurnWithCaller)(nil), "circle.cctp.v1.MsgDepositForBurnWithCaller")
	proto.RegisterType((*MsgDepositForBurnWithCallerResponse)(nil), "circle.cctp.v1.MsgDepositForBurnWithCallerResponse")
	proto.RegisterType((*MsgReplaceDepositForBurn)(nil), "circle.cctp.v1.MsgReplaceDepositForBurn")
	proto.RegisterType((*MsgReplaceDepositForBurnResponse)(nil), "circle.cctp.v1.MsgReplaceDepositForBurnResponse")
	proto.RegisterType((*MsgReceiveMessage)(nil), "circle.cctp.v1.MsgReceiveMessage")
	proto.RegisterType((*MsgReceiveMessageResponse)(nil), "circle.cctp.v1.MsgReceiveMessageResponse")
	proto.RegisterType((*MsgSendMessage)(nil), "circle.cctp.v1.MsgSendMessage")
	proto.RegisterType((*MsgSendMessageResponse)(nil), "circle.cctp.v1.MsgSendMessageResponse")
	proto.RegisterType((*MsgSendMessageWithCaller)(nil), "circle.cctp.v1.MsgSendMessageWithCaller")
	proto.RegisterType((*MsgSendMessageWithCallerResponse)(nil), "circle.cctp.v1.MsgSendMessageWithCallerResponse")
	proto.RegisterType((*MsgReplaceMessage)(nil), "circle.cctp.v1.MsgReplaceMessage")
	proto.RegisterType((*MsgReplaceMessageResponse)(nil), "circle.cctp.v1.MsgReplaceMessageResponse")
	proto.RegisterType((*MsgUpdateSignatureThreshold)(nil), "circle.cctp.v1.MsgUpdateSignatureThreshold")
	proto.RegisterType((*MsgUpdateSignatureThresholdResponse)(nil), "circle.cctp.v1.MsgUpdateSignatureThresholdResponse")
	proto.RegisterType((*MsgLinkTokenPair)(nil), "circle.cctp.v1.MsgLinkTokenPair")
	proto.RegisterType((*MsgLinkTokenPairResponse)(nil), "circle.cctp.v1.MsgLinkTokenPairResponse")
	proto.RegisterType((*MsgUnlinkTokenPair)(nil), "circle.cctp.v1.MsgUnlinkTokenPair")
	proto.RegisterType((*MsgUnlinkTokenPairResponse)(nil), "circle.cctp.v1.MsgUnlinkTokenPairResponse")
	proto.RegisterType((*MsgAddRemoteTokenMessenger)(nil), "circle.cctp.v1.MsgAddRemoteTokenMessenger")
	proto.RegisterType((*MsgAddRemoteTokenMessengerResponse)(nil), "circle.cctp.v1.MsgAddRemoteTokenMessengerResponse")
	proto.RegisterType((*MsgRemoveRemoteTokenMessenger)(nil), "circle.cctp.v1.MsgRemoveRemoteTokenMessenger")
	proto.RegisterType((*MsgRemoveRemoteTokenMessengerResponse)(nil), "circle.cctp.v1.MsgRemoveRemoteTokenMessengerResponse")
}

func init() { proto.RegisterFile("circle/cctp/v1/tx.proto", fileDescriptor_0b990d866e8d1445) }

var fileDescriptor_0b990d866e8d1445 = []byte{
	// 1590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x59, 0xcd, 0x6f, 0xdc, 0x44,
	0x14, 0x8f, 0xd3, 0xa4, 0x4d, 0x5f, 0x3e, 0x9a, 0x9a, 0x34, 0xdd, 0xba, 0xed, 0x26, 0x71, 0x5b,
	0xba, 0x6d, 0xc8, 0x6e, 0xd3, 0x12, 0x09, 0x54, 0x71, 0xd8, 0x34, 0x20, 0x45, 0x62, 0x45, 0xe4,
	0xb4, 0x02, 0x81, 0xc4, 0xe2, 0xb5, 0xa7, 0x8e, 0x95, 0xdd, 0x99, 0x95, 0xc7, 0x9b, 0x8f, 0x8a,
	0x13, 0xe2, 0x06, 0x12, 0x20, 0xf5, 0xc4, 0x5f, 0xd4, 0x0b, 0x52, 0x25, 0x2e, 0x88, 0x43, 0x85,
	0x5a, 0x71, 0xe7, 0x4f, 0x40, 0x33, 0xb6, 0x67, 0x6d, 0xef, 0x8c, 0x77, 0x53, 0x3e, 0x04, 0xb7,
	0xf5, 0xcc, 0xef, 0x7d, 0xcc, 0x6f, 0xde, 0x7b, 0xf3, 0x66, 0x16, 0x2e, 0x3a, 0x7e, 0xe0, 0xb4,
	0x51, 0xcd, 0x71, 0xc2, 0x6e, 0xed, 0x60, 0xbd, 0x16, 0x1e, 0x55, 0xbb, 0x01, 0x09, 0x89, 0x3e,
	0x17, 0x4d, 0x54, 0xd9, 0x44, 0xf5, 0x60, 0xdd, 0x58, 0xf0, 0x88, 0x47, 0xf8, 0x54, 0x8d, 0xfd,
	0x8a, 0x50, 0x66, 0x1d, 0xe6, 0x1a, 0xd4, 0x7b, 0xd4, 0x75, 0xed, 0x10, 0x7d, 0x74, 0x88, 0x51,
	0xa0, 0xeb, 0x30, 0xf1, 0x38, 0x20, 0x9d, 0x92, 0xb6, 0xac, 0x55, 0xce, 0x5a, 0xfc, 0xb7, 0x7e,
	0x19, 0xce, 0x62, 0x74, 0xd8, 0x24, 0x0c, 0x50, 0x1a, 0xe7, 0x13, 0x53, 0x18, 0x1d, 0x72, 0x01,
	0xb3, 0x04, 0x8b, 0x59, 0x15, 0x16, 0xa2, 0x5d, 0x82, 0x29, 0x32, 0xbf, 0x80, 0x92, 0x98, 0xa9,
	0x87, 0x21, 0xa2, 0x21, 0x0a, 0x1a, 0x36, 0xb6, 0x3d, 0x85, 0x99, 0x3b, 0xb0, 0xc0, 0xcc, 0xd8,
	0x31, 0xb4, 0xd9, 0x89, 0xb0, 0xb1, 0x45, 0x1d, 0xa3, 0xc3, 0x9c, 0x16, 0xd3, 0x84, 0x65, 0x95,
	0x05, 0xa9, 0x17, 0x0f, 0xc9, 0x3e, 0xc2, 0x0f, 0x08, 0x0e, 0x03, 0xd2, 0x6e, 0x17, 0x7b, 0x11,
	0x32, 0x68, 0xd3, 0x11, 0xd8, 0x94, 0x17, 0x39, 0x2d, 0x19, 0x2f, 0x72, 0x73, 0xc2, 0x8b, 0x2d,
	0x38, 0x27, 0x30, 0x3b, 0x76, 0x8f, 0x2a, 0x8c, 0x5f, 0x05, 0x60, 0xc6, 0xbb, 0x1c, 0x11, 0x9b,
	0x64, 0xdc, 0x47, 0x22, 0xe6, 0x25, 0xb8, 0x98, 0xd3, 0x22, 0x0c, 0x5c, 0xe7, 0x3b, 0x59, 0x77,
	0x1c, 0xd4, 0x0d, 0x95, 0x3b, 0x19, 0x6f, 0x56, 0x0a, 0x25, 0xe4, 0x1f, 0xc0, 0xf9, 0x06, 0xf5,
	0xde, 0xc7, 0x76, 0xab, 0x2d, 0xa8, 0x94, 0xba, 0x68, 0xc0, 0x54, 0xb2, 0x43, 0x49, 0x2c, 0x24,
	0xdf, 0xe6, 0x65, 0xb8, 0x34, 0xa0, 0x24, 0x45, 0x81, 0xde, 0xa0, 0xde, 0x96, 0x4f, 0xff, 0x92,
	0x89, 0x2b, 0x60, 0x0c, 0x6a, 0x11, 0x36, 0x6a, 0xdc, 0x01, 0x4e, 0xcd, 0x66, 0x2f, 0xc0, 0x3e,
	0xf6, 0xea, 0xd8, 0x6d, 0xf8, 0x38, 0xf4, 0xb1, 0x27, 0x25, 0xe4, 0x1a, 0xac, 0x28, 0x05, 0x84,
	0xd6, 0x75, 0xb8, 0xcc, 0x68, 0xc7, 0xdd, 0xd1, 0xf5, 0xde, 0x80, 0x6b, 0x05, 0x22, 0x42, 0xf3,
	0xbb, 0x1c, 0xc6, 0xcd, 0xef, 0x22, 0xec, 0x46, 0x20, 0x0b, 0x39, 0xc8, 0x3f, 0xf0, 0xb1, 0xd7,
	0x40, 0x94, 0xda, 0x1e, 0xa2, 0x52, 0x0b, 0x6b, 0xb0, 0x3a, 0x82, 0xa8, 0xb0, 0x74, 0x1f, 0x6e,
	0xf4, 0x1d, 0x3a, 0xa9, 0xad, 0x1a, 0xac, 0x8d, 0x24, 0x2c, 0xac, 0x3d, 0x8c, 0x18, 0xe3, 0x81,
	0xda, 0xb0, 0x8f, 0xe2, 0xf9, 0x4d, 0xe2, 0x1e, 0xef, 0xfa, 0x4f, 0x90, 0x74, 0xd3, 0x57, 0x60,
	0xa6, 0x13, 0xc1, 0x9a, 0xd4, 0x7f, 0x82, 0xf8, 0xc6, 0x4f, 0x58, 0xd3, 0xf1, 0x18, 0x13, 0x4b,
	0x48, 0x55, 0x68, 0x15, 0xc6, 0xbf, 0xd1, 0xe0, 0x6a, 0x83, 0x7a, 0xbb, 0x28, 0x6c, 0xd8, 0x47,
	0x8c, 0xfb, 0x7a, 0x87, 0xf4, 0x70, 0xb8, 0x83, 0x82, 0x58, 0x42, 0x6a, 0x7f, 0x09, 0xa6, 0xdb,
	0xc4, 0xb1, 0xdb, 0x51, 0xe6, 0xc7, 0x71, 0x07, 0x7c, 0x88, 0x27, 0xb5, 0xbe, 0x01, 0xa7, 0x6d,
	0xae, 0xa8, 0x74, 0x8a, 0xcd, 0x6d, 0x5e, 0x7d, 0xf6, 0x62, 0x69, 0xec, 0xd7, 0x17, 0x4b, 0x17,
	0x1c, 0x42, 0x3b, 0x84, 0x52, 0x77, 0xbf, 0xea, 0x93, 0x5a, 0xc7, 0x0e, 0xf7, 0xaa, 0xdb, 0x38,
	0xb4, 0x62, 0xb0, 0x79, 0x93, 0x13, 0xaf, 0x76, 0x46, 0xb8, 0xfd, 0xb3, 0xc6, 0x53, 0x70, 0x0b,
	0x75, 0x09, 0xf5, 0xc3, 0x0f, 0x48, 0xc0, 0xd0, 0x52, 0x57, 0xfb, 0x9e, 0x8c, 0x9f, 0xc0, 0x13,
	0x7d, 0x0d, 0x74, 0x17, 0xd1, 0xd0, 0xc7, 0x76, 0xe8, 0x13, 0xdc, 0x74, 0x49, 0xc7, 0xf6, 0x31,
	0x5f, 0xcc, 0xac, 0x75, 0x3e, 0x35, 0xb3, 0xc5, 0x27, 0xf4, 0x1b, 0x30, 0xd7, 0xf1, 0x71, 0xd8,
	0x0c, 0x90, 0xe3, 0x77, 0x7d, 0x84, 0xc3, 0xd2, 0xc4, 0xb2, 0x56, 0x99, 0xb1, 0x66, 0xd9, 0xa8,
	0x95, 0x0c, 0xb2, 0x92, 0xd5, 0xea, 0x05, 0x38, 0xa6, 0x6d, 0x32, 0x2a, 0x59, 0x6c, 0x84, 0xb3,
	0x66, 0xae, 0xf3, 0x8c, 0xcc, 0x2e, 0x2a, 0x59, 0xb2, 0xbe, 0x00, 0x93, 0x98, 0x60, 0x07, 0xf1,
	0xd5, 0x4d, 0x58, 0xd1, 0x87, 0xf9, 0xed, 0x38, 0x8f, 0x9e, 0xac, 0xcc, 0xc7, 0x7e, 0xb8, 0xf7,
	0xc0, 0x56, 0x56, 0xed, 0xff, 0x11, 0x25, 0x79, 0xa3, 0x0e, 0x5f, 0x55, 0xe9, 0x34, 0xd7, 0x94,
	0x36, 0x1a, 0x2d, 0xd7, 0xbc, 0xcf, 0xa3, 0x5e, 0xc5, 0xc6, 0x10, 0x2e, 0xff, 0xd0, 0xf8, 0xf1,
	0x67, 0xa1, 0x6e, 0xdb, 0x76, 0xd0, 0x08, 0xb1, 0x75, 0x0b, 0xe6, 0x49, 0xe0, 0x7b, 0x3e, 0xb6,
	0xdb, 0xcd, 0x38, 0xf7, 0x38, 0xa5, 0x33, 0xd6, 0xb9, 0x64, 0x3c, 0xc9, 0xa2, 0x75, 0x58, 0x10,
	0xd0, 0xa8, 0x3e, 0x73, 0xb7, 0x39, 0x7d, 0x33, 0xd6, 0x1b, 0xc9, 0x5c, 0xbd, 0x3f, 0xa5, 0xbf,
	0x0d, 0x8b, 0xec, 0x7c, 0x93, 0x2c, 0x3f, 0x22, 0x92, 0x1d, 0xbd, 0x5b, 0x79, 0x06, 0xf4, 0xb7,
	0x80, 0x1d, 0xbb, 0xcd, 0x1c, 0xf5, 0x93, 0x5c, 0x62, 0x1e, 0xa3, 0xc3, 0x46, 0x9a, 0xfd, 0xf8,
	0x38, 0x96, 0xae, 0x58, 0xe4, 0x9a, 0xc3, 0x53, 0x2d, 0xaa, 0x5f, 0xa8, 0xa8, 0x2a, 0x94, 0xe0,
	0x4c, 0x96, 0x85, 0xe4, 0x53, 0x5f, 0x86, 0xe9, 0xc1, 0x45, 0xa7, 0x87, 0xcc, 0x0d, 0x1e, 0xfa,
	0x59, 0x23, 0x62, 0xbb, 0x4a, 0x70, 0x86, 0xf6, 0x1c, 0x07, 0x51, 0xca, 0xed, 0x4d, 0x59, 0xc9,
	0xa7, 0xf9, 0x54, 0xe3, 0x47, 0x39, 0x2b, 0xb3, 0x45, 0x9e, 0xc9, 0x43, 0x77, 0x5c, 0x15, 0xba,
	0x57, 0xe0, 0x6c, 0x9f, 0xba, 0xc8, 0xd9, 0xfe, 0x40, 0xba, 0xf8, 0xb6, 0x88, 0x7b, 0x1c, 0xef,
	0x46, 0x52, 0x7c, 0x59, 0x85, 0x35, 0xab, 0xbc, 0x75, 0x48, 0x79, 0x35, 0x24, 0xf2, 0x7e, 0x8a,
	0x22, 0x2f, 0x25, 0x30, 0x24, 0x85, 0xff, 0xe5, 0x05, 0x29, 0xd2, 0x70, 0x52, 0x95, 0x86, 0xef,
	0xf0, 0xb0, 0x92, 0x2e, 0x67, 0x08, 0x13, 0xbf, 0x6b, 0x71, 0xb4, 0xf1, 0x88, 0x2c, 0xda, 0xd3,
	0x7f, 0x36, 0xf9, 0x2a, 0x30, 0xcf, 0xd3, 0x68, 0x90, 0x97, 0x39, 0x96, 0x44, 0x29, 0x6a, 0xd4,
	0x69, 0x3a, 0xa9, 0x4e, 0xd3, 0xb8, 0xfb, 0xcb, 0x2e, 0x53, 0x64, 0xdc, 0x76, 0xaa, 0x23, 0xd8,
	0xf5, 0x3d, 0x6c, 0x87, 0xbd, 0x00, 0x3d, 0xdc, 0x0b, 0x10, 0xdd, 0x23, 0x6d, 0x57, 0xca, 0xc6,
	0x62, 0xa6, 0xa6, 0xcf, 0x8a, 0x13, 0x35, 0xdd, 0x06, 0x0c, 0xaa, 0x12, 0x16, 0xbf, 0xd3, 0x60,
	0xbe, 0x41, 0xbd, 0x0f, 0x7d, 0xbc, 0xcf, 0xeb, 0xee, 0x8e, 0xed, 0xcb, 0x03, 0xef, 0x1a, 0xcc,
	0x06, 0xa8, 0x43, 0x42, 0x94, 0x8d, 0xb9, 0x99, 0x68, 0x30, 0x0e, 0xb7, 0x15, 0x88, 0xbf, 0xe3,
	0xaa, 0x1e, 0xe7, 0x7b, 0x34, 0x16, 0xd5, 0xf5, 0x5c, 0x07, 0x31, 0x91, 0xef, 0x20, 0x4c, 0x83,
	0x67, 0x44, 0xc6, 0x21, 0xe1, 0xed, 0x0f, 0x1a, 0x6f, 0x8f, 0x1f, 0xe1, 0xf6, 0x7f, 0xc7, 0xdf,
	0xa8, 0xd7, 0xce, 0xb9, 0x24, 0x3c, 0xf6, 0xf8, 0x6c, 0xdd, 0x75, 0xad, 0xbe, 0x4e, 0xb6, 0xeb,
	0x08, 0x7b, 0xea, 0x7b, 0x64, 0xe4, 0x71, 0xd3, 0x77, 0x63, 0xa7, 0xa7, 0xa2, 0x81, 0x6d, 0x97,
	0x15, 0x44, 0xdb, 0x75, 0x03, 0x56, 0x10, 0x23, 0x5f, 0x93, 0x4f, 0xf3, 0x3a, 0x98, 0x6a, 0x43,
	0xc2, 0x9d, 0x1d, 0xde, 0xf4, 0x31, 0xc8, 0x01, 0xfa, 0x5b, 0x3c, 0x8a, 0x3b, 0x37, 0xb5, 0xc6,
	0xc4, 0xf4, 0xdd, 0xaf, 0x17, 0xe1, 0x54, 0x83, 0x7a, 0xfa, 0x23, 0x98, 0x4e, 0x5f, 0xc0, 0xca,
	0xd5, 0xec, 0x1d, 0xbc, 0x9a, 0xbd, 0x7a, 0x19, 0x6f, 0x16, 0xcf, 0x8b, 0xaa, 0x72, 0x0c, 0x17,
	0x55, 0x2c, 0xdf, 0x96, 0xa9, 0x90, 0x63, 0x8d, 0xbb, 0xa3, 0x63, 0x85, 0xe9, 0xcf, 0x61, 0x2e,
	0xd7, 0x33, 0xac, 0x48, 0xb4, 0x64, 0x21, 0xc6, 0xad, 0xa1, 0x10, 0xa1, 0xff, 0x4b, 0x28, 0x29,
	0xdb, 0xbc, 0xd5, 0xa1, 0x6a, 0xfa, 0x60, 0xe3, 0xde, 0x09, 0xc0, 0xc2, 0xba, 0x0d, 0xe7, 0xf2,
	0xd7, 0x51, 0x53, 0xa6, 0x27, 0x8b, 0x31, 0x6e, 0x0f, 0xc7, 0xa4, 0x09, 0xcc, 0xdd, 0xa9, 0x65,
	0x04, 0x66, 0x21, 0x52, 0x02, 0xe5, 0x97, 0x6a, 0xfd, 0x33, 0x98, 0xcd, 0x16, 0xb8, 0x65, 0x89,
	0x6c, 0x06, 0x61, 0x54, 0x86, 0x21, 0x84, 0xf2, 0x03, 0x58, 0x54, 0x5c, 0xa5, 0x65, 0x1e, 0xca,
	0xa1, 0xc6, 0xfa, 0xc8, 0x50, 0x61, 0xf7, 0xa9, 0x06, 0xcb, 0x43, 0xef, 0xc4, 0xf7, 0x54, 0x7a,
	0x0b, 0x84, 0x8c, 0xfb, 0xaf, 0x21, 0x94, 0xde, 0xcb, 0x5c, 0xc7, 0x28, 0xdb, 0xcb, 0x2c, 0x44,
	0xba, 0x97, 0x8a, 0x96, 0xf0, 0x2b, 0x0d, 0x8c, 0x82, 0xfa, 0xb5, 0x26, 0xd5, 0xa4, 0x82, 0x1b,
	0x1b, 0x27, 0x82, 0x0b, 0x27, 0x28, 0x5c, 0x90, 0x5f, 0x16, 0x2a, 0x52, 0x7d, 0x12, 0xa4, 0x71,
	0x67, 0x54, 0x64, 0x96, 0xd9, 0x4c, 0x77, 0xb4, 0xa2, 0xd6, 0x51, 0xcc, 0xac, 0xac, 0xf9, 0x60,
	0x85, 0x39, 0xdd, 0x4e, 0xcb, 0x0a, 0x73, 0x6a, 0x5e, 0x5a, 0x98, 0x65, 0x8d, 0x2f, 0x85, 0x0b,
	0xf2, 0xf6, 0xb6, 0x52, 0xac, 0x20, 0x55, 0xb7, 0xee, 0x8c, 0x8a, 0x4c, 0x17, 0xad, 0x7c, 0x93,
	0x20, 0x2b, 0x5a, 0x39, 0x8c, 0xb4, 0x68, 0x29, 0x4e, 0x76, 0x56, 0x95, 0x95, 0x8f, 0x5d, 0xab,
	0x52, 0x3d, 0x72, 0xb0, 0xb4, 0x2a, 0x0f, 0x7b, 0x13, 0xd3, 0x7f, 0xd4, 0xc0, 0x1c, 0xe1, 0x9d,
	0x6a, 0x43, 0xad, 0xbb, 0xa8, 0x02, 0xbc, 0xf7, 0x5a, 0x62, 0xe9, 0x48, 0x4a, 0xbf, 0x96, 0xcb,
	0x22, 0x29, 0x35, 0x2f, 0x8d, 0x24, 0xc9, 0x53, 0x39, 0x8b, 0x24, 0xf9, 0x3b, 0x79, 0x45, 0xa9,
	0x20, 0x87, 0x94, 0x46, 0x52, 0xe1, 0xcb, 0x78, 0xdf, 0x68, 0xfe, 0x59, 0x5c, 0x6d, 0x34, 0x87,
	0x2c, 0x30, 0xaa, 0x78, 0x08, 0xd7, 0x3f, 0x81, 0x99, 0xcc, 0x2b, 0xf8, 0x92, 0x52, 0x43, 0x04,
	0x30, 0x6e, 0x0e, 0x01, 0x64, 0xa2, 0x56, 0xf5, 0xe0, 0xb8, 0xaa, 0x54, 0x32, 0x08, 0x96, 0x47,
	0xed, 0x90, 0x47, 0x47, 0x5e, 0xbc, 0x0b, 0x5e, 0x1c, 0xd7, 0xa4, 0x79, 0xae, 0x82, 0x4b, 0x8b,
	0xf7, 0xf0, 0x27, 0xc4, 0x3e, 0x05, 0x92, 0x1b, 0x96, 0x9a, 0x82, 0x41, 0x70, 0x01, 0x05, 0xea,
	0x0b, 0xd7, 0xe6, 0xf6, 0xb3, 0x97, 0x65, 0xed, 0xf9, 0xcb, 0xb2, 0xf6, 0xdb, 0xcb, 0xb2, 0xf6,
	0xfd, 0xab, 0xf2, 0xd8, 0xf3, 0x57, 0xe5, 0xb1, 0x5f, 0x5e, 0x95, 0xc7, 0x3e, 0xad, 0x79, 0x7e,
	0xb8, 0xd7, 0x6b, 0x55, 0x1d, 0xd2, 0xa9, 0x1d, 0x3e, 0x6e, 0xb5, 0x89, 0xb3, 0xef, 0xec, 0xd9,
	0x3e, 0xae, 0x61, 0xd2, 0x6a, 0xa3, 0x35, 0xfe, 0xe7, 0xd5, 0x51, 0xf4, 0x1f, 0x56, 0x78, 0xdc,
	0x45, 0xb4, 0x75, 0x9a, 0xff, 0x3d, 0x75, 0xef, 0xcf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x3e,
	0xec, 0xa5, 0xdf, 0x1a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AcceptOwner(ctx context.Context, in *MsgAcceptOwner, opts ...grpc.CallOption) (*MsgAcceptOwnerResponse, error)
	AddRemoteTokenMessenger(ctx context.Context, in *MsgAddRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgAddRemoteTokenMessengerResponse, error)
	DepositForBurn(ctx context.Context, in *MsgDepositForBurn, opts ...grpc.CallOption) (*MsgDepositForBurnResponse, error)
	DepositForBurnWithCaller(ctx context.Context, in *MsgDepositForBurnWithCaller, opts ...grpc.CallOption) (*MsgDepositForBurnWithCallerResponse, error)
	DisableAttester(ctx context.Context, in *MsgDisableAttester, opts ...grpc.CallOption) (*MsgDisableAttesterResponse, error)
	EnableAttester(ctx context.Context, in *MsgEnableAttester, opts ...grpc.CallOption) (*MsgEnableAttesterResponse, error)
	LinkTokenPair(ctx context.Context, in *MsgLinkTokenPair, opts ...grpc.CallOption) (*MsgLinkTokenPairResponse, error)
	PauseBurningAndMinting(ctx context.Context, in *MsgPauseBurningAndMinting, opts ...grpc.CallOption) (*MsgPauseBurningAndMintingResponse, error)
	PauseSendingAndReceivingMessages(ctx context.Context, in *MsgPauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgPauseSendingAndReceivingMessagesResponse, error)
	ReceiveMessage(ctx context.Context, in *MsgReceiveMessage, opts ...grpc.CallOption) (*MsgReceiveMessageResponse, error)
	RemoveRemoteTokenMessenger(ctx context.Context, in *MsgRemoveRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgRemoveRemoteTokenMessengerResponse, error)
	ReplaceDepositForBurn(ctx context.Context, in *MsgReplaceDepositForBurn, opts ...grpc.CallOption) (*MsgReplaceDepositForBurnResponse, error)
	ReplaceMessage(ctx context.Context, in *MsgReplaceMessage, opts ...grpc.CallOption) (*MsgReplaceMessageResponse, error)
	SendMessage(ctx context.Context, in *MsgSendMessage, opts ...grpc.CallOption) (*MsgSendMessageResponse, error)
	SendMessageWithCaller(ctx context.Context, in *MsgSendMessageWithCaller, opts ...grpc.CallOption) (*MsgSendMessageWithCallerResponse, error)
	UnlinkTokenPair(ctx context.Context, in *MsgUnlinkTokenPair, opts ...grpc.CallOption) (*MsgUnlinkTokenPairResponse, error)
	UnpauseBurningAndMinting(ctx context.Context, in *MsgUnpauseBurningAndMinting, opts ...grpc.CallOption) (*MsgUnpauseBurningAndMintingResponse, error)
	UnpauseSendingAndReceivingMessages(ctx context.Context, in *MsgUnpauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgUnpauseSendingAndReceivingMessagesResponse, error)
	UpdateOwner(ctx context.Context, in *MsgUpdateOwner, opts ...grpc.CallOption) (*MsgUpdateOwnerResponse, error)
	UpdateAttesterManager(ctx context.Context, in *MsgUpdateAttesterManager, opts ...grpc.CallOption) (*MsgUpdateAttesterManagerResponse, error)
	UpdateTokenController(ctx context.Context, in *MsgUpdateTokenController, opts ...grpc.CallOption) (*MsgUpdateTokenControllerResponse, error)
	UpdatePauser(ctx context.Context, in *MsgUpdatePauser, opts ...grpc.CallOption) (*MsgUpdatePauserResponse, error)
	UpdateMaxMessageBodySize(ctx context.Context, in *MsgUpdateMaxMessageBodySize, opts ...grpc.CallOption) (*MsgUpdateMaxMessageBodySizeResponse, error)
	SetMaxBurnAmountPerMessage(ctx context.Context, in *MsgSetMaxBurnAmountPerMessage, opts ...grpc.CallOption) (*MsgSetMaxBurnAmountPerMessageResponse, error)
	UpdateSignatureThreshold(ctx context.Context, in *MsgUpdateSignatureThreshold, opts ...grpc.CallOption) (*MsgUpdateSignatureThresholdResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AcceptOwner(ctx context.Context, in *MsgAcceptOwner, opts ...grpc.CallOption) (*MsgAcceptOwnerResponse, error) {
	out := new(MsgAcceptOwnerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/AcceptOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddRemoteTokenMessenger(ctx context.Context, in *MsgAddRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgAddRemoteTokenMessengerResponse, error) {
	out := new(MsgAddRemoteTokenMessengerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/AddRemoteTokenMessenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositForBurn(ctx context.Context, in *MsgDepositForBurn, opts ...grpc.CallOption) (*MsgDepositForBurnResponse, error) {
	out := new(MsgDepositForBurnResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/DepositForBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DepositForBurnWithCaller(ctx context.Context, in *MsgDepositForBurnWithCaller, opts ...grpc.CallOption) (*MsgDepositForBurnWithCallerResponse, error) {
	out := new(MsgDepositForBurnWithCallerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/DepositForBurnWithCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DisableAttester(ctx context.Context, in *MsgDisableAttester, opts ...grpc.CallOption) (*MsgDisableAttesterResponse, error) {
	out := new(MsgDisableAttesterResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/DisableAttester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) EnableAttester(ctx context.Context, in *MsgEnableAttester, opts ...grpc.CallOption) (*MsgEnableAttesterResponse, error) {
	out := new(MsgEnableAttesterResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/EnableAttester", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) LinkTokenPair(ctx context.Context, in *MsgLinkTokenPair, opts ...grpc.CallOption) (*MsgLinkTokenPairResponse, error) {
	out := new(MsgLinkTokenPairResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/LinkTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseBurningAndMinting(ctx context.Context, in *MsgPauseBurningAndMinting, opts ...grpc.CallOption) (*MsgPauseBurningAndMintingResponse, error) {
	out := new(MsgPauseBurningAndMintingResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/PauseBurningAndMinting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) PauseSendingAndReceivingMessages(ctx context.Context, in *MsgPauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgPauseSendingAndReceivingMessagesResponse, error) {
	out := new(MsgPauseSendingAndReceivingMessagesResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/PauseSendingAndReceivingMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReceiveMessage(ctx context.Context, in *MsgReceiveMessage, opts ...grpc.CallOption) (*MsgReceiveMessageResponse, error) {
	out := new(MsgReceiveMessageResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/ReceiveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveRemoteTokenMessenger(ctx context.Context, in *MsgRemoveRemoteTokenMessenger, opts ...grpc.CallOption) (*MsgRemoveRemoteTokenMessengerResponse, error) {
	out := new(MsgRemoveRemoteTokenMessengerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/RemoveRemoteTokenMessenger", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceDepositForBurn(ctx context.Context, in *MsgReplaceDepositForBurn, opts ...grpc.CallOption) (*MsgReplaceDepositForBurnResponse, error) {
	out := new(MsgReplaceDepositForBurnResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/ReplaceDepositForBurn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReplaceMessage(ctx context.Context, in *MsgReplaceMessage, opts ...grpc.CallOption) (*MsgReplaceMessageResponse, error) {
	out := new(MsgReplaceMessageResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/ReplaceMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendMessage(ctx context.Context, in *MsgSendMessage, opts ...grpc.CallOption) (*MsgSendMessageResponse, error) {
	out := new(MsgSendMessageResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendMessageWithCaller(ctx context.Context, in *MsgSendMessageWithCaller, opts ...grpc.CallOption) (*MsgSendMessageWithCallerResponse, error) {
	out := new(MsgSendMessageWithCallerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/SendMessageWithCaller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnlinkTokenPair(ctx context.Context, in *MsgUnlinkTokenPair, opts ...grpc.CallOption) (*MsgUnlinkTokenPairResponse, error) {
	out := new(MsgUnlinkTokenPairResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UnlinkTokenPair", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseBurningAndMinting(ctx context.Context, in *MsgUnpauseBurningAndMinting, opts ...grpc.CallOption) (*MsgUnpauseBurningAndMintingResponse, error) {
	out := new(MsgUnpauseBurningAndMintingResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UnpauseBurningAndMinting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnpauseSendingAndReceivingMessages(ctx context.Context, in *MsgUnpauseSendingAndReceivingMessages, opts ...grpc.CallOption) (*MsgUnpauseSendingAndReceivingMessagesResponse, error) {
	out := new(MsgUnpauseSendingAndReceivingMessagesResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UnpauseSendingAndReceivingMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateOwner(ctx context.Context, in *MsgUpdateOwner, opts ...grpc.CallOption) (*MsgUpdateOwnerResponse, error) {
	out := new(MsgUpdateOwnerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UpdateOwner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateAttesterManager(ctx context.Context, in *MsgUpdateAttesterManager, opts ...grpc.CallOption) (*MsgUpdateAttesterManagerResponse, error) {
	out := new(MsgUpdateAttesterManagerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UpdateAttesterManager", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateTokenController(ctx context.Context, in *MsgUpdateTokenController, opts ...grpc.CallOption) (*MsgUpdateTokenControllerResponse, error) {
	out := new(MsgUpdateTokenControllerResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UpdateTokenController", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdatePauser(ctx context.Context, in *MsgUpdatePauser, opts ...grpc.CallOption) (*MsgUpdatePauserResponse, error) {
	out := new(MsgUpdatePauserResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UpdatePauser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateMaxMessageBodySize(ctx context.Context, in *MsgUpdateMaxMessageBodySize, opts ...grpc.CallOption) (*MsgUpdateMaxMessageBodySizeResponse, error) {
	out := new(MsgUpdateMaxMessageBodySizeResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UpdateMaxMessageBodySize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMaxBurnAmountPerMessage(ctx context.Context, in *MsgSetMaxBurnAmountPerMessage, opts ...grpc.CallOption) (*MsgSetMaxBurnAmountPerMessageResponse, error) {
	out := new(MsgSetMaxBurnAmountPerMessageResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/SetMaxBurnAmountPerMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateSignatureThreshold(ctx context.Context, in *MsgUpdateSignatureThreshold, opts ...grpc.CallOption) (*MsgUpdateSignatureThresholdResponse, error) {
	out := new(MsgUpdateSignatureThresholdResponse)
	err := c.cc.Invoke(ctx, "/circle.cctp.v1.Msg/UpdateSignatureThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AcceptOwner(context.Context, *MsgAcceptOwner) (*MsgAcceptOwnerResponse, error)
	AddRemoteTokenMessenger(context.Context, *MsgAddRemoteTokenMessenger) (*MsgAddRemoteTokenMessengerResponse, error)
	DepositForBurn(context.Context, *MsgDepositForBurn) (*MsgDepositForBurnResponse, error)
	DepositForBurnWithCaller(context.Context, *MsgDepositForBurnWithCaller) (*MsgDepositForBurnWithCallerResponse, error)
	DisableAttester(context.Context, *MsgDisableAttester) (*MsgDisableAttesterResponse, error)
	EnableAttester(context.Context, *MsgEnableAttester) (*MsgEnableAttesterResponse, error)
	LinkTokenPair(context.Context, *MsgLinkTokenPair) (*MsgLinkTokenPairResponse, error)
	PauseBurningAndMinting(context.Context, *MsgPauseBurningAndMinting) (*MsgPauseBurningAndMintingResponse, error)
	PauseSendingAndReceivingMessages(context.Context, *MsgPauseSendingAndReceivingMessages) (*MsgPauseSendingAndReceivingMessagesResponse, error)
	ReceiveMessage(context.Context, *MsgReceiveMessage) (*MsgReceiveMessageResponse, error)
	RemoveRemoteTokenMessenger(context.Context, *MsgRemoveRemoteTokenMessenger) (*MsgRemoveRemoteTokenMessengerResponse, error)
	ReplaceDepositForBurn(context.Context, *MsgReplaceDepositForBurn) (*MsgReplaceDepositForBurnResponse, error)
	ReplaceMessage(context.Context, *MsgReplaceMessage) (*MsgReplaceMessageResponse, error)
	SendMessage(context.Context, *MsgSendMessage) (*MsgSendMessageResponse, error)
	SendMessageWithCaller(context.Context, *MsgSendMessageWithCaller) (*MsgSendMessageWithCallerResponse, error)
	UnlinkTokenPair(context.Context, *MsgUnlinkTokenPair) (*MsgUnlinkTokenPairResponse, error)
	UnpauseBurningAndMinting(context.Context, *MsgUnpauseBurningAndMinting) (*MsgUnpauseBurningAndMintingResponse, error)
	UnpauseSendingAndReceivingMessages(context.Context, *MsgUnpauseSendingAndReceivingMessages) (*MsgUnpauseSendingAndReceivingMessagesResponse, error)
	UpdateOwner(context.Context, *MsgUpdateOwner) (*MsgUpdateOwnerResponse, error)
	UpdateAttesterManager(context.Context, *MsgUpdateAttesterManager) (*MsgUpdateAttesterManagerResponse, error)
	UpdateTokenController(context.Context, *MsgUpdateTokenController) (*MsgUpdateTokenControllerResponse, error)
	UpdatePauser(context.Context, *MsgUpdatePauser) (*MsgUpdatePauserResponse, error)
	UpdateMaxMessageBodySize(context.Context, *MsgUpdateMaxMessageBodySize) (*MsgUpdateMaxMessageBodySizeResponse, error)
	SetMaxBurnAmountPerMessage(context.Context, *MsgSetMaxBurnAmountPerMessage) (*MsgSetMaxBurnAmountPerMessageResponse, error)
	UpdateSignatureThreshold(context.Context, *MsgUpdateSignatureThreshold) (*MsgUpdateSignatureThresholdResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AcceptOwner(ctx context.Context, req *MsgAcceptOwner) (*MsgAcceptOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptOwner not implemented")
}
func (*UnimplementedMsgServer) AddRemoteTokenMessenger(ctx context.Context, req *MsgAddRemoteTokenMessenger) (*MsgAddRemoteTokenMessengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRemoteTokenMessenger not implemented")
}
func (*UnimplementedMsgServer) DepositForBurn(ctx context.Context, req *MsgDepositForBurn) (*MsgDepositForBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositForBurn not implemented")
}
func (*UnimplementedMsgServer) DepositForBurnWithCaller(ctx context.Context, req *MsgDepositForBurnWithCaller) (*MsgDepositForBurnWithCallerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DepositForBurnWithCaller not implemented")
}
func (*UnimplementedMsgServer) DisableAttester(ctx context.Context, req *MsgDisableAttester) (*MsgDisableAttesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisableAttester not implemented")
}
func (*UnimplementedMsgServer) EnableAttester(ctx context.Context, req *MsgEnableAttester) (*MsgEnableAttesterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnableAttester not implemented")
}
func (*UnimplementedMsgServer) LinkTokenPair(ctx context.Context, req *MsgLinkTokenPair) (*MsgLinkTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LinkTokenPair not implemented")
}
func (*UnimplementedMsgServer) PauseBurningAndMinting(ctx context.Context, req *MsgPauseBurningAndMinting) (*MsgPauseBurningAndMintingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseBurningAndMinting not implemented")
}
func (*UnimplementedMsgServer) PauseSendingAndReceivingMessages(ctx context.Context, req *MsgPauseSendingAndReceivingMessages) (*MsgPauseSendingAndReceivingMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PauseSendingAndReceivingMessages not implemented")
}
func (*UnimplementedMsgServer) ReceiveMessage(ctx context.Context, req *MsgReceiveMessage) (*MsgReceiveMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (*UnimplementedMsgServer) RemoveRemoteTokenMessenger(ctx context.Context, req *MsgRemoveRemoteTokenMessenger) (*MsgRemoveRemoteTokenMessengerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveRemoteTokenMessenger not implemented")
}
func (*UnimplementedMsgServer) ReplaceDepositForBurn(ctx context.Context, req *MsgReplaceDepositForBurn) (*MsgReplaceDepositForBurnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceDepositForBurn not implemented")
}
func (*UnimplementedMsgServer) ReplaceMessage(ctx context.Context, req *MsgReplaceMessage) (*MsgReplaceMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplaceMessage not implemented")
}
func (*UnimplementedMsgServer) SendMessage(ctx context.Context, req *MsgSendMessage) (*MsgSendMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (*UnimplementedMsgServer) SendMessageWithCaller(ctx context.Context, req *MsgSendMessageWithCaller) (*MsgSendMessageWithCallerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendMessageWithCaller not implemented")
}
func (*UnimplementedMsgServer) UnlinkTokenPair(ctx context.Context, req *MsgUnlinkTokenPair) (*MsgUnlinkTokenPairResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnlinkTokenPair not implemented")
}
func (*UnimplementedMsgServer) UnpauseBurningAndMinting(ctx context.Context, req *MsgUnpauseBurningAndMinting) (*MsgUnpauseBurningAndMintingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseBurningAndMinting not implemented")
}
func (*UnimplementedMsgServer) UnpauseSendingAndReceivingMessages(ctx context.Context, req *MsgUnpauseSendingAndReceivingMessages) (*MsgUnpauseSendingAndReceivingMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpauseSendingAndReceivingMessages not implemented")
}
func (*UnimplementedMsgServer) UpdateOwner(ctx context.Context, req *MsgUpdateOwner) (*MsgUpdateOwnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateOwner not implemented")
}
func (*UnimplementedMsgServer) UpdateAttesterManager(ctx context.Context, req *MsgUpdateAttesterManager) (*MsgUpdateAttesterManagerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAttesterManager not implemented")
}
func (*UnimplementedMsgServer) UpdateTokenController(ctx context.Context, req *MsgUpdateTokenController) (*MsgUpdateTokenControllerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTokenController not implemented")
}
func (*UnimplementedMsgServer) UpdatePauser(ctx context.Context, req *MsgUpdatePauser) (*MsgUpdatePauserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePauser not implemented")
}
func (*UnimplementedMsgServer) UpdateMaxMessageBodySize(ctx context.Context, req *MsgUpdateMaxMessageBodySize) (*MsgUpdateMaxMessageBodySizeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMaxMessageBodySize not implemented")
}
func (*UnimplementedMsgServer) SetMaxBurnAmountPerMessage(ctx context.Context, req *MsgSetMaxBurnAmountPerMessage) (*MsgSetMaxBurnAmountPerMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxBurnAmountPerMessage not implemented")
}
func (*UnimplementedMsgServer) UpdateSignatureThreshold(ctx context.Context, req *MsgUpdateSignatureThreshold) (*MsgUpdateSignatureThresholdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSignatureThreshold not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AcceptOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAcceptOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AcceptOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/AcceptOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AcceptOwner(ctx, req.(*MsgAcceptOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddRemoteTokenMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddRemoteTokenMessenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddRemoteTokenMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/AddRemoteTokenMessenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddRemoteTokenMessenger(ctx, req.(*MsgAddRemoteTokenMessenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositForBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositForBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositForBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/DepositForBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositForBurn(ctx, req.(*MsgDepositForBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DepositForBurnWithCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDepositForBurnWithCaller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DepositForBurnWithCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/DepositForBurnWithCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DepositForBurnWithCaller(ctx, req.(*MsgDepositForBurnWithCaller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DisableAttester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDisableAttester)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DisableAttester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/DisableAttester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DisableAttester(ctx, req.(*MsgDisableAttester))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_EnableAttester_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgEnableAttester)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).EnableAttester(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/EnableAttester",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).EnableAttester(ctx, req.(*MsgEnableAttester))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_LinkTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgLinkTokenPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).LinkTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/LinkTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).LinkTokenPair(ctx, req.(*MsgLinkTokenPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseBurningAndMinting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseBurningAndMinting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseBurningAndMinting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/PauseBurningAndMinting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseBurningAndMinting(ctx, req.(*MsgPauseBurningAndMinting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_PauseSendingAndReceivingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgPauseSendingAndReceivingMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).PauseSendingAndReceivingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/PauseSendingAndReceivingMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).PauseSendingAndReceivingMessages(ctx, req.(*MsgPauseSendingAndReceivingMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceiveMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/ReceiveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReceiveMessage(ctx, req.(*MsgReceiveMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveRemoteTokenMessenger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveRemoteTokenMessenger)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveRemoteTokenMessenger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/RemoveRemoteTokenMessenger",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveRemoteTokenMessenger(ctx, req.(*MsgRemoveRemoteTokenMessenger))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceDepositForBurn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceDepositForBurn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceDepositForBurn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/ReplaceDepositForBurn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceDepositForBurn(ctx, req.(*MsgReplaceDepositForBurn))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReplaceMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReplaceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReplaceMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/ReplaceMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReplaceMessage(ctx, req.(*MsgReplaceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendMessage(ctx, req.(*MsgSendMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendMessageWithCaller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendMessageWithCaller)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendMessageWithCaller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/SendMessageWithCaller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendMessageWithCaller(ctx, req.(*MsgSendMessageWithCaller))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnlinkTokenPair_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnlinkTokenPair)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnlinkTokenPair(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UnlinkTokenPair",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnlinkTokenPair(ctx, req.(*MsgUnlinkTokenPair))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseBurningAndMinting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseBurningAndMinting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseBurningAndMinting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UnpauseBurningAndMinting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseBurningAndMinting(ctx, req.(*MsgUnpauseBurningAndMinting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnpauseSendingAndReceivingMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnpauseSendingAndReceivingMessages)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnpauseSendingAndReceivingMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UnpauseSendingAndReceivingMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnpauseSendingAndReceivingMessages(ctx, req.(*MsgUnpauseSendingAndReceivingMessages))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateOwner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateOwner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateOwner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UpdateOwner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateOwner(ctx, req.(*MsgUpdateOwner))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateAttesterManager_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateAttesterManager)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateAttesterManager(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UpdateAttesterManager",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateAttesterManager(ctx, req.(*MsgUpdateAttesterManager))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateTokenController_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateTokenController)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateTokenController(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UpdateTokenController",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateTokenController(ctx, req.(*MsgUpdateTokenController))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdatePauser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdatePauser)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdatePauser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UpdatePauser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdatePauser(ctx, req.(*MsgUpdatePauser))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateMaxMessageBodySize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateMaxMessageBodySize)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateMaxMessageBodySize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UpdateMaxMessageBodySize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateMaxMessageBodySize(ctx, req.(*MsgUpdateMaxMessageBodySize))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMaxBurnAmountPerMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMaxBurnAmountPerMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMaxBurnAmountPerMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/SetMaxBurnAmountPerMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMaxBurnAmountPerMessage(ctx, req.(*MsgSetMaxBurnAmountPerMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateSignatureThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateSignatureThreshold)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateSignatureThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/circle.cctp.v1.Msg/UpdateSignatureThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateSignatureThreshold(ctx, req.(*MsgUpdateSignatureThreshold))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "circle.cctp.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AcceptOwner",
			Handler:    _Msg_AcceptOwner_Handler,
		},
		{
			MethodName: "AddRemoteTokenMessenger",
			Handler:    _Msg_AddRemoteTokenMessenger_Handler,
		},
		{
			MethodName: "DepositForBurn",
			Handler:    _Msg_DepositForBurn_Handler,
		},
		{
			MethodName: "DepositForBurnWithCaller",
			Handler:    _Msg_DepositForBurnWithCaller_Handler,
		},
		{
			MethodName: "DisableAttester",
			Handler:    _Msg_DisableAttester_Handler,
		},
		{
			MethodName: "EnableAttester",
			Handler:    _Msg_EnableAttester_Handler,
		},
		{
			MethodName: "LinkTokenPair",
			Handler:    _Msg_LinkTokenPair_Handler,
		},
		{
			MethodName: "PauseBurningAndMinting",
			Handler:    _Msg_PauseBurningAndMinting_Handler,
		},
		{
			MethodName: "PauseSendingAndReceivingMessages",
			Handler:    _Msg_PauseSendingAndReceivingMessages_Handler,
		},
		{
			MethodName: "ReceiveMessage",
			Handler:    _Msg_ReceiveMessage_Handler,
		},
		{
			MethodName: "RemoveRemoteTokenMessenger",
			Handler:    _Msg_RemoveRemoteTokenMessenger_Handler,
		},
		{
			MethodName: "ReplaceDepositForBurn",
			Handler:    _Msg_ReplaceDepositForBurn_Handler,
		},
		{
			MethodName: "ReplaceMessage",
			Handler:    _Msg_ReplaceMessage_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Msg_SendMessage_Handler,
		},
		{
			MethodName: "SendMessageWithCaller",
			Handler:    _Msg_SendMessageWithCaller_Handler,
		},
		{
			MethodName: "UnlinkTokenPair",
			Handler:    _Msg_UnlinkTokenPair_Handler,
		},
		{
			MethodName: "UnpauseBurningAndMinting",
			Handler:    _Msg_UnpauseBurningAndMinting_Handler,
		},
		{
			MethodName: "UnpauseSendingAndReceivingMessages",
			Handler:    _Msg_UnpauseSendingAndReceivingMessages_Handler,
		},
		{
			MethodName: "UpdateOwner",
			Handler:    _Msg_UpdateOwner_Handler,
		},
		{
			MethodName: "UpdateAttesterManager",
			Handler:    _Msg_UpdateAttesterManager_Handler,
		},
		{
			MethodName: "UpdateTokenController",
			Handler:    _Msg_UpdateTokenController_Handler,
		},
		{
			MethodName: "UpdatePauser",
			Handler:    _Msg_UpdatePauser_Handler,
		},
		{
			MethodName: "UpdateMaxMessageBodySize",
			Handler:    _Msg_UpdateMaxMessageBodySize_Handler,
		},
		{
			MethodName: "SetMaxBurnAmountPerMessage",
			Handler:    _Msg_SetMaxBurnAmountPerMessage_Handler,
		},
		{
			MethodName: "UpdateSignatureThreshold",
			Handler:    _Msg_UpdateSignatureThreshold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "circle/cctp/v1/tx.proto",
}

func (m *MsgUpdateOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewOwner) > 0 {
		i -= len(m.NewOwner)
		copy(dAtA[i:], m.NewOwner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewOwner)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAttesterManager) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAttesterManager) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAttesterManager) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewAttesterManager) > 0 {
		i -= len(m.NewAttesterManager)
		copy(dAtA[i:], m.NewAttesterManager)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewAttesterManager)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateAttesterManagerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateAttesterManagerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateAttesterManagerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTokenController) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTokenController) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTokenController) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewTokenController) > 0 {
		i -= len(m.NewTokenController)
		copy(dAtA[i:], m.NewTokenController)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewTokenController)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateTokenControllerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateTokenControllerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateTokenControllerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePauser) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePauser) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePauser) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewPauser) > 0 {
		i -= len(m.NewPauser)
		copy(dAtA[i:], m.NewPauser)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewPauser)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdatePauserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdatePauserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdatePauserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOwner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOwner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOwner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAcceptOwnerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAcceptOwnerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAcceptOwnerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgEnableAttester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnableAttester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnableAttester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attester) > 0 {
		i -= len(m.Attester)
		copy(dAtA[i:], m.Attester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Attester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgEnableAttesterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgEnableAttesterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgEnableAttesterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDisableAttester) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableAttester) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableAttester) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attester) > 0 {
		i -= len(m.Attester)
		copy(dAtA[i:], m.Attester)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Attester)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDisableAttesterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDisableAttesterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDisableAttesterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPauseBurningAndMinting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseBurningAndMinting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseBurningAndMinting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseBurningAndMintingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseBurningAndMintingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseBurningAndMintingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseBurningAndMinting) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseBurningAndMinting) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseBurningAndMinting) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseBurningAndMintingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseBurningAndMintingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseBurningAndMintingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgPauseSendingAndReceivingMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseSendingAndReceivingMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseSendingAndReceivingMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgPauseSendingAndReceivingMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgPauseSendingAndReceivingMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgPauseSendingAndReceivingMessagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseSendingAndReceivingMessages) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseSendingAndReceivingMessages) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseSendingAndReceivingMessages) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnpauseSendingAndReceivingMessagesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnpauseSendingAndReceivingMessagesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnpauseSendingAndReceivingMessagesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaxMessageBodySize) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaxMessageBodySize) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaxMessageBodySize) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MessageSize != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MessageSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateMaxMessageBodySizeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateMaxMessageBodySizeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateMaxMessageBodySizeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxBurnAmountPerMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxBurnAmountPerMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxBurnAmountPerMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.LocalToken) > 0 {
		i -= len(m.LocalToken)
		copy(dAtA[i:], m.LocalToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LocalToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxBurnAmountPerMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxBurnAmountPerMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxBurnAmountPerMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDepositForBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositForBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositForBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BurnToken) > 0 {
		i -= len(m.BurnToken)
		copy(dAtA[i:], m.BurnToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BurnToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositForBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositForBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositForBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositForBurnWithCaller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositForBurnWithCaller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositForBurnWithCaller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCaller) > 0 {
		i -= len(m.DestinationCaller)
		copy(dAtA[i:], m.DestinationCaller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationCaller)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BurnToken) > 0 {
		i -= len(m.BurnToken)
		copy(dAtA[i:], m.BurnToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BurnToken)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MintRecipient) > 0 {
		i -= len(m.MintRecipient)
		copy(dAtA[i:], m.MintRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MintRecipient)))
		i--
		dAtA[i] = 0x22
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDepositForBurnWithCallerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDepositForBurnWithCallerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDepositForBurnWithCallerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceDepositForBurn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceDepositForBurn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceDepositForBurn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewMintRecipient) > 0 {
		i -= len(m.NewMintRecipient)
		copy(dAtA[i:], m.NewMintRecipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMintRecipient)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewDestinationCaller) > 0 {
		i -= len(m.NewDestinationCaller)
		copy(dAtA[i:], m.NewDestinationCaller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewDestinationCaller)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginalAttestation) > 0 {
		i -= len(m.OriginalAttestation)
		copy(dAtA[i:], m.OriginalAttestation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalAttestation)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalMessage) > 0 {
		i -= len(m.OriginalMessage)
		copy(dAtA[i:], m.OriginalMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceDepositForBurnResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceDepositForBurnResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceDepositForBurnResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReceiveMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiveMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiveMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attestation) > 0 {
		i -= len(m.Attestation)
		copy(dAtA[i:], m.Attestation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Attestation)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReceiveMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiveMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiveMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Success {
		i--
		if m.Success {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MessageBody) > 0 {
		i -= len(m.MessageBody)
		copy(dAtA[i:], m.MessageBody)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageBody)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendMessageWithCaller) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMessageWithCaller) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMessageWithCaller) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DestinationCaller) > 0 {
		i -= len(m.DestinationCaller)
		copy(dAtA[i:], m.DestinationCaller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestinationCaller)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MessageBody) > 0 {
		i -= len(m.MessageBody)
		copy(dAtA[i:], m.MessageBody)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MessageBody)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Recipient) > 0 {
		i -= len(m.Recipient)
		copy(dAtA[i:], m.Recipient)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Recipient)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DestinationDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DestinationDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendMessageWithCallerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendMessageWithCallerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendMessageWithCallerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewDestinationCaller) > 0 {
		i -= len(m.NewDestinationCaller)
		copy(dAtA[i:], m.NewDestinationCaller)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewDestinationCaller)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewMessageBody) > 0 {
		i -= len(m.NewMessageBody)
		copy(dAtA[i:], m.NewMessageBody)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewMessageBody)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OriginalAttestation) > 0 {
		i -= len(m.OriginalAttestation)
		copy(dAtA[i:], m.OriginalAttestation)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalAttestation)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OriginalMessage) > 0 {
		i -= len(m.OriginalMessage)
		copy(dAtA[i:], m.OriginalMessage)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OriginalMessage)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReplaceMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReplaceMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReplaceMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSignatureThreshold) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSignatureThreshold) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSignatureThreshold) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateSignatureThresholdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateSignatureThresholdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateSignatureThresholdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgLinkTokenPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLinkTokenPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLinkTokenPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalToken) > 0 {
		i -= len(m.LocalToken)
		copy(dAtA[i:], m.LocalToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LocalToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RemoteToken) > 0 {
		i -= len(m.RemoteToken)
		copy(dAtA[i:], m.RemoteToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RemoteDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgLinkTokenPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgLinkTokenPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgLinkTokenPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnlinkTokenPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlinkTokenPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlinkTokenPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LocalToken) > 0 {
		i -= len(m.LocalToken)
		copy(dAtA[i:], m.LocalToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LocalToken)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RemoteToken) > 0 {
		i -= len(m.RemoteToken)
		copy(dAtA[i:], m.RemoteToken)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RemoteToken)))
		i--
		dAtA[i] = 0x1a
	}
	if m.RemoteDomain != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.RemoteDomain))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnlinkTokenPairResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnlinkTokenPairResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnlinkTokenPairResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddRemoteTokenMessenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRemoteTokenMessenger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRemoteTokenMessenger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1a
	}
	if m.DomainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DomainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddRemoteTokenMessengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddRemoteTokenMessengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddRemoteTokenMessengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveRemoteTokenMessenger) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveRemoteTokenMessenger) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveRemoteTokenMessenger) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DomainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.DomainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveRemoteTokenMessengerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveRemoteTokenMessengerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveRemoteTokenMessengerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewOwner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateAttesterManager) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewAttesterManager)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateAttesterManagerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateTokenController) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewTokenController)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateTokenControllerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdatePauser) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewPauser)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdatePauserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAcceptOwner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAcceptOwnerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgEnableAttester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Attester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgEnableAttesterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDisableAttester) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Attester)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDisableAttesterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPauseBurningAndMinting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPauseBurningAndMintingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnpauseBurningAndMinting) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnpauseBurningAndMintingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgPauseSendingAndReceivingMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgPauseSendingAndReceivingMessagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnpauseSendingAndReceivingMessages) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnpauseSendingAndReceivingMessagesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateMaxMessageBodySize) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MessageSize != 0 {
		n += 1 + sovTx(uint64(m.MessageSize))
	}
	return n
}

func (m *MsgUpdateMaxMessageBodySizeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMaxBurnAmountPerMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LocalToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetMaxBurnAmountPerMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDepositForBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BurnToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositForBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgDepositForBurnWithCaller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = len(m.MintRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.BurnToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationCaller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDepositForBurnWithCallerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgReplaceDepositForBurn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalAttestation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewDestinationCaller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMintRecipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReplaceDepositForBurnResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReceiveMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Attestation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReceiveMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Success {
		n += 2
	}
	return n
}

func (m *MsgSendMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MessageBody)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgSendMessageWithCaller) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DestinationDomain != 0 {
		n += 1 + sovTx(uint64(m.DestinationDomain))
	}
	l = len(m.Recipient)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MessageBody)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestinationCaller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSendMessageWithCallerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgReplaceMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalMessage)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OriginalAttestation)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewMessageBody)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewDestinationCaller)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReplaceMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateSignatureThreshold) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovTx(uint64(m.Amount))
	}
	return n
}

func (m *MsgUpdateSignatureThresholdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgLinkTokenPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RemoteDomain != 0 {
		n += 1 + sovTx(uint64(m.RemoteDomain))
	}
	l = len(m.RemoteToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LocalToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgLinkTokenPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnlinkTokenPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.RemoteDomain != 0 {
		n += 1 + sovTx(uint64(m.RemoteDomain))
	}
	l = len(m.RemoteToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.LocalToken)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUnlinkTokenPairResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddRemoteTokenMessenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DomainId != 0 {
		n += 1 + sovTx(uint64(m.DomainId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddRemoteTokenMessengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveRemoteTokenMessenger) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.DomainId != 0 {
		n += 1 + sovTx(uint64(m.DomainId))
	}
	return n
}

func (m *MsgRemoveRemoteTokenMessengerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewOwner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewOwner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAttesterManager) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAttesterManager: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAttesterManager: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewAttesterManager", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewAttesterManager = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateAttesterManagerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateAttesterManagerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateAttesterManagerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTokenController) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTokenController: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTokenController: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTokenController", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewTokenController = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateTokenControllerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateTokenControllerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateTokenControllerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePauser) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePauser: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePauser: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewPauser", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewPauser = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdatePauserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdatePauserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdatePauserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOwner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOwner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOwner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAcceptOwnerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAcceptOwnerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAcceptOwnerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnableAttester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnableAttester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnableAttester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgEnableAttesterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgEnableAttesterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgEnableAttesterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableAttester) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableAttester: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableAttester: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attester", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attester = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDisableAttesterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDisableAttesterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDisableAttesterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseBurningAndMinting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseBurningAndMinting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseBurningAndMinting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseBurningAndMintingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseBurningAndMintingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseBurningAndMintingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseBurningAndMinting) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseBurningAndMinting: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseBurningAndMinting: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseBurningAndMintingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseBurningAndMintingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseBurningAndMintingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseSendingAndReceivingMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseSendingAndReceivingMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseSendingAndReceivingMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgPauseSendingAndReceivingMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgPauseSendingAndReceivingMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgPauseSendingAndReceivingMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseSendingAndReceivingMessages) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseSendingAndReceivingMessages: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseSendingAndReceivingMessages: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnpauseSendingAndReceivingMessagesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnpauseSendingAndReceivingMessagesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnpauseSendingAndReceivingMessagesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaxMessageBodySize) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaxMessageBodySize: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaxMessageBodySize: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageSize", wireType)
			}
			m.MessageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateMaxMessageBodySizeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateMaxMessageBodySizeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateMaxMessageBodySizeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxBurnAmountPerMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxBurnAmountPerMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxBurnAmountPerMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxBurnAmountPerMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxBurnAmountPerMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxBurnAmountPerMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositForBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositForBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositForBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = append(m.MintRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.MintRecipient == nil {
				m.MintRecipient = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositForBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositForBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositForBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositForBurnWithCaller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositForBurnWithCaller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositForBurnWithCaller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MintRecipient = append(m.MintRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.MintRecipient == nil {
				m.MintRecipient = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BurnToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCaller = append(m.DestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationCaller == nil {
				m.DestinationCaller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDepositForBurnWithCallerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDepositForBurnWithCallerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDepositForBurnWithCallerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceDepositForBurn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalMessage = append(m.OriginalMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalMessage == nil {
				m.OriginalMessage = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAttestation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalAttestation = append(m.OriginalAttestation[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalAttestation == nil {
				m.OriginalAttestation = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDestinationCaller = append(m.NewDestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.NewDestinationCaller == nil {
				m.NewDestinationCaller = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMintRecipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMintRecipient = append(m.NewMintRecipient[:0], dAtA[iNdEx:postIndex]...)
			if m.NewMintRecipient == nil {
				m.NewMintRecipient = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceDepositForBurnResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurnResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceDepositForBurnResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiveMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiveMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiveMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message[:0], dAtA[iNdEx:postIndex]...)
			if m.Message == nil {
				m.Message = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attestation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attestation = append(m.Attestation[:0], dAtA[iNdEx:postIndex]...)
			if m.Attestation == nil {
				m.Attestation = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiveMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiveMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiveMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Success", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Success = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageBody = append(m.MessageBody[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageBody == nil {
				m.MessageBody = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendMessageWithCaller) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMessageWithCaller: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMessageWithCaller: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationDomain", wireType)
			}
			m.DestinationDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recipient", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Recipient = append(m.Recipient[:0], dAtA[iNdEx:postIndex]...)
			if m.Recipient == nil {
				m.Recipient = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageBody = append(m.MessageBody[:0], dAtA[iNdEx:postIndex]...)
			if m.MessageBody == nil {
				m.MessageBody = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationCaller = append(m.DestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.DestinationCaller == nil {
				m.DestinationCaller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendMessageWithCallerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendMessageWithCallerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendMessageWithCallerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalMessage", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalMessage = append(m.OriginalMessage[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalMessage == nil {
				m.OriginalMessage = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalAttestation", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OriginalAttestation = append(m.OriginalAttestation[:0], dAtA[iNdEx:postIndex]...)
			if m.OriginalAttestation == nil {
				m.OriginalAttestation = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewMessageBody", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewMessageBody = append(m.NewMessageBody[:0], dAtA[iNdEx:postIndex]...)
			if m.NewMessageBody == nil {
				m.NewMessageBody = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewDestinationCaller", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewDestinationCaller = append(m.NewDestinationCaller[:0], dAtA[iNdEx:postIndex]...)
			if m.NewDestinationCaller == nil {
				m.NewDestinationCaller = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReplaceMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReplaceMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReplaceMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSignatureThreshold) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSignatureThreshold: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSignatureThreshold: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateSignatureThresholdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateSignatureThresholdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateSignatureThresholdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLinkTokenPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLinkTokenPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLinkTokenPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteToken = append(m.RemoteToken[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteToken == nil {
				m.RemoteToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgLinkTokenPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgLinkTokenPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgLinkTokenPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlinkTokenPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlinkTokenPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlinkTokenPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteDomain", wireType)
			}
			m.RemoteDomain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RemoteDomain |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RemoteToken", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RemoteToken = append(m.RemoteToken[:0], dAtA[iNdEx:postIndex]...)
			if m.RemoteToken == nil {
				m.RemoteToken = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnlinkTokenPairResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnlinkTokenPairResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnlinkTokenPairResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRemoteTokenMessenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRemoteTokenMessenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRemoteTokenMessenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			m.DomainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = append(m.Address[:0], dAtA[iNdEx:postIndex]...)
			if m.Address == nil {
				m.Address = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddRemoteTokenMessengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddRemoteTokenMessengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddRemoteTokenMessengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveRemoteTokenMessenger) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveRemoteTokenMessenger: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveRemoteTokenMessenger: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainId", wireType)
			}
			m.DomainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DomainId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveRemoteTokenMessengerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveRemoteTokenMessengerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveRemoteTokenMessengerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
